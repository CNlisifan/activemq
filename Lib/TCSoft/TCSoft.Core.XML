<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TCSoft.Core</name>
    </assembly>
    <members>
        <member name="T:TCSoft.Caching.FileCacheManager`1">
            <summary>
            文件缓存策略 
            <para>　　1、数据缓存内存中，有效期为1天</para>
            <para>　　2、数据缓存提示备份一份在缓存文件中。数据更新时，必须更新文件。</para>
            <para>　　3、缓存监视文件修改，如果有修改，那么缓存失效。</para>
            <para>　　4、查询数据时，如果缓存中无效，那么从文件中获取；如果文件无效，那么直接读取数据库。</para>
            <para>要求：</para>
            <para>　　数据更新必须同步缓存文件</para>   
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:TCSoft.Caching.FileCacheManager`1._defaultCacheFolder">
            <summary>
            默认缓存文件夹
            </summary>
        </member>
        <member name="M:TCSoft.Caching.FileCacheManager`1.#ctor(System.Int32)">
            <summary>
            构造函数
            <para>　　使用默认序列化实现初始化文件缓存管理器</para>
            </summary>
        </member>
        <member name="M:TCSoft.Caching.FileCacheManager`1.#ctor(TCSoft.Caching.ICacheSerializater,System.String,System.Int32)">
            <summary>
            构造函数
            <para>　　初始化文件缓存管理器</para>
            </summary>
            <param name="cacheSerializater">缓存序列化接口</param>
            <param name="defaultCacheFolder">默认缓存文件夹(根目录下的文件夹名称)</param> 
            <param name="regionName"></param> 
        </member>
        <member name="M:TCSoft.Caching.FileCacheManager`1.UpdateCache(System.Guid,`0)">
            <summary>
            更新缓存,通过更新文件触发缓存失效
            </summary>
            <param name="key"></param>
            <param name="regionName"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Caching.FileCacheManager`1.Get(System.Guid)">
            <summary>
            使用一级缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Caching.FileCacheManager`1.Get(System.Guid,System.Func{System.Guid,`0},System.Func{System.Guid,`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="key"></param> 
            <param name="func"></param> 
            <param name="hasChanged">数据版本是否已经发生变更(重复验证数据有效性)</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Caching.FileCacheManager`1.AddOnlyFileCache(System.Guid,`0)">
            <summary>
            仅文件缓存一级缓存
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:TCSoft.Caching.FileCacheManager`1.AddCache(System.Guid,`0)">
            <summary>
            
            </summary>
            <param name="key">键值</param> 
            <param name="data">缓存值</param>
        </member>
        <member name="M:TCSoft.Caching.FileCacheManager`1.Delete(System.Guid)">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param> 
        </member>
        <member name="M:TCSoft.Caching.FileCacheManager`1.ClearCaches">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="T:TCSoft.Caching.ICacheSerializater">
            <summary>
            缓存数据序列化
            </summary>
        </member>
        <member name="M:TCSoft.Caching.ICacheSerializater.Save(System.Object,System.String)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <param name="filename">文件路径</param>
        </member>
        <member name="M:TCSoft.Caching.ICacheSerializater.Load``1(System.String)">
            <summary>
            反序列化,从XML文件中反序列化数据
            </summary>
            <param name="filename"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Caching.ICacheSerializater.Load(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="elementType"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Caching.DefaultCacheSerializater">
            <summary>
            缓存数据序列化默认实现
            </summary>
        </member>
        <member name="M:TCSoft.Caching.DefaultCacheSerializater.Save(System.Object,System.String)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <param name="filename">文件路径</param>
        </member>
        <member name="M:TCSoft.Caching.DefaultCacheSerializater.Load``1(System.String)">
            <summary>
            反序列化,从XML文件中反序列化数据
            </summary>
            <param name="filename"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Caching.JsonFileCacheSerializater">
            <summary>
            缓存数据序列化默认实现
            </summary>
        </member>
        <member name="M:TCSoft.Caching.JsonFileCacheSerializater.Save(System.Object,System.String)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <param name="filename">文件路径</param>
        </member>
        <member name="M:TCSoft.Caching.JsonFileCacheSerializater.Load``1(System.String)">
            <summary>
            反序列化,从XML文件中反序列化数据
            </summary>
            <param name="filename"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Caching.JsonFileCacheSerializater.Load(System.Type,System.String)">
            <summary>
            反序列化,从XML文件中反序列化数据
            </summary>
            <param name="elementType"></param>
            <param name="filename"></param> 
            <returns></returns>
        </member>
        <member name="T:TCSoft.Caching.NetMemoryCacheManager">
            <summary>
            表示一个内存缓存 
            </summary>
        </member>
        <member name="F:TCSoft.Caching.NetMemoryCacheManager._regionName">
            <summary>
            缓存区域名称
            </summary>
        </member>
        <member name="F:TCSoft.Caching.NetMemoryCacheManager._defaultCacheTime">
            <summary>
             
            </summary> 
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.#ctor(System.Int32,System.Int32)">
            <summary>
            缓存区域名称前缀
            </summary>  
            <param name="regionName"></param>
            <param name="defaultCacheTime">默认缓存时间120分钟(2个小时)，单位分钟</param>
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.GetCacheKey``1(``0)">
            <summary>
            
            </summary>
            <param name="key"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.Get``2(``0,System.Func{``0,``1},System.Collections.Generic.IEnumerable{System.Runtime.Caching.ChangeMonitor})">
            <summary>
            根据键值获取或更新缓存键值
            </summary>
            <param name="key">缓存键值</param>
            <param name="regionName">缓存区域</param>
            <param name="func"></param>
            <param name="changeMonitorList"></param> 
            <returns>返回当前键值关联的缓存对象</returns>
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.GetList``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Collections.Generic.IEnumerable{System.Runtime.Caching.ChangeMonitor})">
            <summary>
            根据键值获取或更新缓存键值
            </summary>
            <param name="key">缓存键值</param>
            <param name="regionName">缓存区域</param>
            <param name="func"></param>
            <param name="changeMonitorList"></param> 
            <returns>返回当前键值关联的缓存对象</returns>
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.GetDictionary``3(``0)">
            <summary>
            根据键值获取或更新缓存键值
            </summary>
            <param name="key">缓存键值</param> 
            <param name="func"></param> 
            <returns>返回当前键值关联的缓存对象</returns>
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.SetDictionary``3(``0,System.Collections.Generic.IDictionary{``1,``2})">
            <summary>
            根据键值获取或更新缓存键值
            </summary>
            <param name="key">缓存键值</param>
            <param name="data"></param>
            <returns>返回当前键值关联的缓存对象</returns>
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.GetList``2(``0,System.Collections.Generic.IEnumerable{System.Runtime.Caching.ChangeMonitor})">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="key"></param>
            <param name="changeMonitorList"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.Get``2(``0)">
            <summary>
            根据键值获取或更新缓存键值
            </summary>
            <param name="key">缓存键值</param>
            <param name="regionName">缓存区域</param> 
            <returns>返回当前键值关联的缓存对象</returns>
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.SetList``2(``0,System.Collections.Generic.IList{``1},System.Int32,System.Collections.Generic.IEnumerable{System.Runtime.Caching.ChangeMonitor})">
            <summary>
            添加或更新缓存数据。如果更新缓存，那么缓存过期时间不做更新
            </summary>
            <param name="key">key</param> 
            <param name="data">Data</param>
            <param name="cacheTime">Cache time</param>
            <param name="changeMonitorList">修改监视器</param>
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.Set``2(``0,``1,System.Int32,System.Collections.Generic.IEnumerable{System.Runtime.Caching.ChangeMonitor})">
            <summary>
            添加或更新缓存数据。如果更新缓存，那么缓存过期时间不做更新
            </summary>
            <param name="key">key</param>
            <param name="regionName"></param>
            <param name="data">Data</param>
            <param name="cacheTime">Cache time</param>
            <param name="changeMonitorList">修改监视器</param>
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.IsSet``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.Remove``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.RemoveByPattern(System.String)">
            <summary>
            根据正则表达式移除缓存
            </summary>
            <param name="pattern">正则表达式</param> 
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.RemoveByRegion">
            <summary>
            根据正则表达式移除缓存
            </summary>
            <param name="regionName"> </param> 
        </member>
        <member name="M:TCSoft.Caching.NetMemoryCacheManager.Clear">
            <summary>
            清空所有缓存
            </summary>
        </member>
        <member name="P:TCSoft.Caching.NetMemoryCacheManager.DefaultCacheTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Caching.NetMemoryCacheManager.Cache">
            <summary>
            当前缓存对象获取
            </summary>
        </member>
        <member name="T:TCSoft.Caching.RedisCacheManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Caching.RedisCacheManager._regionName">
            <summary>
            缓存区域名称前缀
            </summary>  
        </member>
        <member name="M:TCSoft.Caching.RedisCacheManager.#ctor(System.Int32,System.Int32)">
            <summary>
            缓存区域名称前缀
            </summary>  
            <param name="regionName">区域ID</param>
            <param name="defaultCacheTime">默认缓存时间120分钟(2个小时)，单位分钟</param>
        </member>
        <member name="M:TCSoft.Caching.RedisCacheManager.GetCacheKey``1(``0)">
            <summary>
            
            </summary>
            <param name="key"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Caching.RedisCacheManager.Get``2(``0,System.Func{``0,``1})">
            <summary>
            根据键值获取或更新缓存键值
            </summary>
            <param name="key">缓存键值</param> 
            <param name="func"></param> 
            <returns>返回当前键值关联的缓存对象</returns>
        </member>
        <member name="M:TCSoft.Caching.RedisCacheManager.GetList``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            根据键值获取或更新缓存键值
            </summary>
            <param name="key">缓存键值</param> 
            <param name="func"></param> 
            <returns>返回当前键值关联的缓存对象</returns>
        </member>
        <member name="M:TCSoft.Caching.RedisCacheManager.GetDictionary``3(``0,System.Func{``0,System.Collections.Generic.IDictionary{``1,``2}})">
            <summary>
            根据键值获取或更新缓存键值
            </summary>
            <param name="key">缓存键值</param> 
            <param name="func"></param> 
            <returns>返回当前键值关联的缓存对象</returns>
        </member>
        <member name="M:TCSoft.Caching.RedisCacheManager.SetDictionary``3(``0,System.Collections.Generic.IDictionary{``1,``2},System.Int32,System.Collections.Generic.IEnumerable{System.Runtime.Caching.ChangeMonitor})">
            <summary>
            添加或更新缓存数据。如果更新缓存，那么缓存过期时间不做更新
            </summary>
            <param name="key">key</param> 
            <param name="data">Data</param>
            <param name="cacheTime">Cache time</param>
            <param name="changeMonitorList">修改监视器</param>
        </member>
        <member name="M:TCSoft.Caching.RedisCacheManager.Get``2(``0)">
            <summary>
            根据键值获取或更新缓存键值
            </summary>
            <param name="key">缓存键值</param> 
            <returns>返回当前键值关联的缓存对象</returns>
        </member>
        <member name="M:TCSoft.Caching.RedisCacheManager.SetList``2(``0,System.Collections.Generic.IList{``1},System.Int32,System.Collections.Generic.IEnumerable{System.Runtime.Caching.ChangeMonitor})">
            <summary>
            添加或更新缓存数据。如果更新缓存，那么缓存过期时间不做更新
            </summary>
            <param name="key">key</param> 
            <param name="data">Data</param>
            <param name="cacheTime">Cache time</param>
            <param name="changeMonitorList">修改监视器</param>
        </member>
        <member name="M:TCSoft.Caching.RedisCacheManager.Set``2(``0,``1,System.Int32,System.Collections.Generic.IEnumerable{System.Runtime.Caching.ChangeMonitor})">
            <summary>
            添加或更新缓存数据。如果更新缓存，那么缓存过期时间不做更新
            </summary>
            <param name="key">key</param> 
            <param name="data">Data</param>
            <param name="cacheTime">Cache time</param>
            <param name="changeMonitorList">修改监视器</param>
        </member>
        <member name="M:TCSoft.Caching.RedisCacheManager.Remove``1(``0)">
            <summary>
            移除指定缓存
            </summary>
            <param name="key">key</param> 
        </member>
        <member name="M:TCSoft.Caching.RedisCacheManager.RemovePattern(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:TCSoft.Caching.RedisCacheManager.RemoveStartWith(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:TCSoft.Caching.RedisCacheManager.RemoveRegion">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Caching.RedisCacheManager.DefaultCacheTime">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Collections.IPageOfDatatable">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Collections.IPagerInfo">
            <summary>
            分页基本信息
            </summary>
        </member>
        <member name="P:TCSoft.Collections.IPagerInfo.PageIndex">
            <summary>
            页码 页码序号从0开始 
            </summary>
        </member>
        <member name="P:TCSoft.Collections.IPagerInfo.PageSize">
            <summary>
            页面大小
            </summary>
        </member>
        <member name="P:TCSoft.Collections.IPagerInfo.TotalItemCount">
            <summary>
            总记录数量[大于0的数字]
            </summary>
        </member>
        <member name="P:TCSoft.Collections.IPagerInfo.TotalPageCount">
            <summary>
            总页数[最少有一页，哪怕是没有记录，也会显示一页]
            </summary>
        </member>
        <member name="P:TCSoft.Collections.IPagerInfo.StartIndex">
            <summary>
            从0开始计数
            </summary>
        </member>
        <member name="P:TCSoft.Collections.IPagerInfo.EndIndex">
            <summary>
            最后条数 取值范围从0到TotalItemCount-1
            </summary>
        </member>
        <member name="P:TCSoft.Collections.IPageOfDatatable.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Collections.PageOfDatatable">
            <summary>
            分页数据列表
            </summary> 
        </member>
        <member name="M:TCSoft.Collections.PageOfDatatable.#ctor(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:TCSoft.Collections.PageOfDatatable.SearchHitViewState">
            <summary>
            查询页面状态数据
            TODO 需要从但前页面移除
            </summary>
        </member>
        <member name="P:TCSoft.Collections.PageOfDatatable.PageIndex">
            <summary> 
            索引从0开始
            </summary> 
        </member>
        <member name="P:TCSoft.Collections.PageOfDatatable.PageSize">
            <summary>
            页面大小
            </summary> 
        </member>
        <member name="P:TCSoft.Collections.PageOfDatatable.TotalItemCount">
            <summary>
            大于0的数字
            </summary> 
        </member>
        <member name="P:TCSoft.Collections.PageOfDatatable.TotalPageCount">
            <summary>
            最少有一页，哪怕是没有记录，也会显示一页
            </summary> 
        </member>
        <member name="P:TCSoft.Collections.PageOfDatatable.StartIndex">
            <summary>
            从0开始计数
            </summary> 
        </member>
        <member name="P:TCSoft.Collections.PageOfDatatable.EndIndex">
            <summary>
            取值范围从0到TotalItemCount-1
            </summary> 
        </member>
        <member name="M:TCSoft.Collections.PageOfItemsExtension.ToObjectsPageOfItems``1(TCSoft.Collections.IPageOfItems{``0})">
            <summary>
            
            </summary>
            <param name="pageOfItems"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Commands.CommandHandlerBase`1">
            <summary>
            
            </summary> 
            <typeparam name="TResult"></typeparam> 
        </member>
        <member name="T:TCSoft.Commands.ICommandHandler`1">
            <summary>
            命令控制器
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:TCSoft.Commands.ICommandHandler`1.Execute(System.Object)">
            <summary>
            
            </summary> 
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Commands.ICommandHandler`1.Logger">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:TCSoft.Commands.CommandHandlerBase`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Commands.CommandHandlerBase`1.Execute(System.Object)">
            <summary>
            可以重载的方法
            </summary> 
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Commands.CommandHandlerBase`2">
            <summary>
            
            </summary>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TResult"></typeparam> 
        </member>
        <member name="T:TCSoft.Commands.ICommandHandler`2">
            <summary>
            命令控制器
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TCommand"></typeparam>
        </member>
        <member name="M:TCSoft.Commands.ICommandHandler`2.Execute(`0)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Commands.CommandHandlerBase`2.Execute(`0)">
            <summary>
            可以重载的方法
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Commands.CommandHandlerNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Commands.CommandHandlerNotFoundException.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:TCSoft.Commands.DefaultCommandResult">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Commands.ICommandResult">
            <summary>
            CQRS模式中Command的返回结果
            </summary>
        </member>
        <member name="M:TCSoft.Commands.DefaultCommandResult.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="success"></param>
        </member>
        <member name="P:TCSoft.Commands.DefaultCommandResult.Success">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Commands.ICommandBus`1">
            <summary>
            工作单元唯一的
            </summary>
        </member>
        <member name="M:TCSoft.Commands.ICommandBus`1.Submit``1(``0)">
            <summary>
            命令提交
            </summary>
            <typeparam name="TCommand"></typeparam>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Commands.ICommandBus`1.Validate``1(``0)">
            <summary>
            命令验证
            </summary>
            <typeparam name="TCommand"></typeparam>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Commands.IValidationHandler`1">
            <summary>
            
            </summary>
            <typeparam name="TCommand"></typeparam>
        </member>
        <member name="M:TCSoft.Commands.IValidationHandler`1.Validate(`0)">
            <summary>
            命令验证
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Commands.ValidationHandlerNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Commands.ValidationHandlerNotFoundException.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:TCSoft.Config.AppSettingsHelper">
            <summary>
             AppSettings值获取
            </summary>
        </member>
        <member name="P:TCSoft.Config.AppSettingsHelper.DomainAddress">
            <summary>
            主域名
            </summary>
        </member>
        <member name="T:TCSoft.Config.AttachmentInfo">
            <summary>
            附件信息
            </summary>
        </member>
        <member name="P:TCSoft.Config.AttachmentInfo.MaxFileSize">
            <summary>
             上传附件最大限制（MB）
            </summary>
        </member>
        <member name="P:TCSoft.Config.AttachmentInfo.AttachmentExtension">
            <summary>
            附件允许类型，例如：*.jpg;*.gif;*.png;*.jpeg;
            </summary>
        </member>
        <member name="P:TCSoft.Config.AttachmentInfo.AttachmentType">
            <summary>
            附件类型
            </summary>
        </member>
        <member name="M:TCSoft.Config.JsonConfigBase.Load(System.Type,System.Func{System.String},System.Func{System.Object})">
            <summary>
            返回配置项当前值或默认值（默认值不能为空）
            </summary>
            <param name="elementType"></param>
            <param name="getConfigfileFunc"></param>
            <param name="newFunc"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Config.JsonConfigBase.Load``1">
            <summary>
            返回配置项当前值或默认值（默认值不能为空）
            </summary>
            <typeparam name="T"></typeparam>
            <returns>返回配置项当前值或默认值（默认值不能为空）</returns>
        </member>
        <member name="M:TCSoft.Config.JsonConfigBase.Save">
            <summary>
            保存并刷新配置
            </summary>
        </member>
        <member name="M:TCSoft.Config.JsonConfigBase.Flush">
            <summary>
            保存并刷新配置
            </summary>
        </member>
        <member name="M:TCSoft.Config.JsonConfigBase.GetConfigFile">
            <summary>
            获取配置文件的相对路径（相对应用程序域的跟目录）
            </summary>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Config.JsonConfigHelper">
            <summary>
            Json配置文件
            </summary>
        </member>
        <member name="M:TCSoft.Config.JsonConfigHelper.GetCurrent(System.Type,System.Func{System.String},System.Func{System.Object})">
            <summary>
            返回配置项当前值或默认值（默认值不能为空）
            </summary>
        </member>
        <member name="M:TCSoft.Config.JsonConfigHelper.GetCurrent``1(System.Func{System.String})">
            <summary>
            返回配置项当前值或默认值（默认值不能为空）
            </summary>
        </member>
        <member name="P:TCSoft.Config.RunConfig.Current">
            <summary>
            Gets the singleton Nop engine used to access Nop services.
            </summary>
        </member>
        <member name="P:TCSoft.Config.RunConfig.EnabledEncrypt">
            <summary>
            配置项是否加密启动
            </summary>
        </member>
        <member name="T:TCSoft.DataAnnotations.DynamicHidenAttribute">
            <summary>
            需要做隐藏控制的类中添加属性控制 
            </summary>
        </member>
        <member name="M:TCSoft.DataAnnotations.DynamicHidenAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="corpTypeProperty">企业类型依赖的属性</param> 
        </member>
        <member name="F:TCSoft.Data.EffentNextType.None">
            <summary>
            对其他语句无任何影响 
            </summary>
        </member>
        <member name="F:TCSoft.Data.EffentNextType.WhenHaveContine">
            <summary>
            当前语句必须为"select count(1) from .."格式，如果存在则继续执行，不存在回滚事务
            </summary>
        </member>
        <member name="F:TCSoft.Data.EffentNextType.WhenNoHaveContine">
            <summary>
            当前语句必须为"select count(1) from .."格式，如果不存在则继续执行，存在回滚事务
            </summary>
        </member>
        <member name="F:TCSoft.Data.EffentNextType.ExcuteEffectRows">
            <summary>
            当前语句影响到的行数必须大于0，否则回滚事务
            </summary>
        </member>
        <member name="F:TCSoft.Data.EffentNextType.SolicitationEvent">
            <summary>
            引发事件-当前语句必须为"select count(1) from .."格式，如果不存在则继续执行，存在回滚事务
            </summary>
        </member>
        <member name="T:TCSoft.Data.DbHelperMySql">
            <summary>
            数据访问抽象基础类
            Copyright (C) Maticsoft
            </summary>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.GetMaxID(System.String,System.String,System.String)">
            <summary>
            得到最大值
            </summary>
            <param name="FieldName"></param>
            <param name="TableName"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.Exists(System.String,System.String)">
            <summary>
            是否存在
            </summary>
            <param name="strSql"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.Exists(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            是否存在（基于MySqlParameter）
            </summary>
            <param name="strSql"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.ExecuteSql(System.String,System.String)">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.ExecuteSqlTran(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.ExecuteSql(System.String,System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.ExecuteSqlGet(System.String,System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.ExecuteSqlInsertImg(System.String,System.String,System.Byte[])">
            <summary>
            向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="fs">图像字节,数据库的字段类型为image的情况</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.GetSingle(System.String,System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="sqlString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.ExecuteReader(System.String,System.String)">
            <summary>
            执行查询语句，返回MySqlDataReader ( 注意：调用该方法后，一定要对MySqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>MySqlDataReader</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.Query(System.String,System.String)">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.Query(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="SQLString"></param>
            <param name="Times"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.ExecuteSql(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.ExecuteSqlTran(System.String,System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的MySqlParameter[]）</param>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.ExecuteSqlTran(System.String,System.Collections.Generic.List{TCSoft.Data.CommandInfo})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的MySqlParameter[]）</param>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.ExecuteSqlTranWithIndentity(System.String,System.Collections.Generic.List{TCSoft.Data.CommandInfo})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的MySqlParameter[]）</param>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.ExecuteSqlTranWithIndentity(System.String,System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的MySqlParameter[]）</param>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.GetSingle(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.ExecuteReader(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行查询语句，返回MySqlDataReader ( 注意：调用该方法后，一定要对MySqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>MySqlDataReader</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperMySql.Query(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="T:TCSoft.Data.DbHelperSql">
            <summary>
            数据访问访问层基类扩展
            </summary>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.RunProcedure(System.String,System.String,System.Data.IDataParameter[],System.String)">
            <summary>
            执行存储过程
            </summary>
            <param name="connectionString"></param>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="tableName">DataSet结果中的表名</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.BuildQueryCommand(System.Data.SqlClient.SqlConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            构建 SqlCommand 对象(用来返回一个结果集，而不是一个整数值)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>SqlCommand</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.RunProcedureNonQuery(System.String,System.String,System.Data.IDataParameter[],System.Int32@)">
            <summary>
            执行存储过程，返回影响的行数		
            </summary>
            <param name="connectionString"></param>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="rowsAffected">影响的行数</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.RunProcedureNonQuery(System.String,System.String,System.Data.IDataParameter[])">
            <summary>
            执行存储过程，返回影响的行数		
            </summary>
            <param name="connectionString"></param>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.BuildIntCommand(System.Data.SqlClient.SqlConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            创建 SqlCommand 对象实例(用来返回一个整数值)	
            </summary>
            <param name="connection"></param>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>SqlCommand 对象实例</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.ExecuteSql(System.String,System.String)">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.ExecuteSql(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="SQLString"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.ExecuteSql(System.String,System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.ExecuteSqlGet(System.String,System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.ExecuteSqlInsertImg(System.String,System.String,System.Byte[])">
            <summary>
            向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="fs">图像字节,数据库的字段类型为image的情况</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.GetSingle(System.String,System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.ExecuteReader(System.String,System.String)">
            <summary>
            执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.Query(System.String,System.String)">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.ExecuteSql(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.GetSingle(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="connectionString"></param>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.ExecuteReader(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <param name="connectionString"></param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:TCSoft.Data.DbHelperSql.Query(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="connectionString"></param>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="T:TCSoft.Data.IRepository`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.GetFirstOrDefault(System.String)">
            <summary>
            
            </summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.GetPaged(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            分页数据获取
            </summary>
            <param name="whereClause"></param>
            <param name="fields"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.GetModel(System.Int32)">
            <summary>
            根据Id获取实例
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.GetList(System.String,System.String,System.Int32)">
            <summary>
            获取列表
            </summary>
            <param name="whereClause"></param> 
            <param name="orderBy"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.Count(System.String)">
            <summary>
            记录条数获取
            </summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.Exists(System.String)">
            <summary>
            
            </summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.Exists(System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            数据是否存在
            </summary>
            <param name="whereClause"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.Create(`0)">
            <summary>
            表: 的添加方法｜｜表描述：臂长操作
            </summary>
            <param name="model">ArmlenoperateModel 实例</param> 
            <returns>返回结果：0(添加错误)，>0(添加成功)</returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.Create(`0,System.Data.SqlClient.SqlTransaction)">
            <summary>
            表: 的添加方法｜｜表描述：臂长操作
            </summary>
            <param name="model">ArmlenoperateModel 实例</param>
            <param name="transaction">数据库事务对象</param>
            <returns>返回结果：0(添加错误)，>0(添加成功)</returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.Update(`0)">
            <summary>
            表:T的修改方法｜｜表描述：臂长操作
            </summary>
            <param name="model">T 实例</param> 
            <returns>返回结果：0(修改错误)，>0(修改成功)</returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.Update(System.Int32,System.String,System.Object)">
            <summary>
            更新摸个字段值
            </summary>
            <param name="id"></param>
            <param name="fieldname"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.Update(`0,System.Data.SqlClient.SqlTransaction)">
            <summary>
            表:T 的修改方法｜｜表描述：臂长操作
            </summary>
            <param name="model">T 实例</param>
            <param name="transaction">数据库事务对象</param>
            <returns>返回结果：0(修改错误)，>0(修改成功)</returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.Delete(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.Delete(System.Int32,System.Data.SqlClient.SqlTransaction)">
            <summary>
            表:d_ArmLenOperate的删除方法｜｜表描述：臂长操作
            </summary>
            <param name="id">主键ID</param> 
            <param name="transaction">数据库事务对象</param>
            <returns>返回结果：0(删除错误)，>0(删除成功)</returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.DeleteByField``1(System.String,`0,System.Data.SqlClient.SqlTransaction)">
            <summary>
            根据黑匣子编号删除记录
            </summary>
            <param name="fieldValue"></param>
            <param name="transaction"></param>
            <param name="fieldname"></param>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand that returns the first column of the first record against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.Execute(System.String)">
            <summary>
            
            </summary>
            <param name="sqlClause"></param>
        </member>
        <member name="M:TCSoft.Data.IRepository`1.ExecuteDataSet(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            
            </summary>
            <param name="sqlClause"></param>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Data.IRepository`1.Logger">
            <summary>
            日志提供接口
            </summary>
        </member>
        <member name="T:TCSoft.Data.KeyValueEntity">
            <summary>
            键值数据实体
            </summary> 
        </member>
        <member name="T:TCSoft.Data.EntityBase">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Data.EntityBase`1">
            <summary>
            数据实体基类
            </summary>
            <typeparam name="TKey">主键类型</typeparam> 
        </member>
        <member name="T:TCSoft.Data.CloneEntityBase">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Rest.RestContentBase">
            <summary>
            支持Rest服务的内容主体基类（可JSON序列化）
            </summary> 
        </member>
        <member name="T:TCSoft.Rest.IJsonContent">
            <summary>
            支持Json序列化接口
            </summary>
        </member>
        <member name="M:TCSoft.Rest.RestContentBase.OnPropertyChanged(System.String)">
            <summary>
            激活属性修改完成处理事件
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:TCSoft.Rest.RestContentBase.OnPropertyChanging(System.String,System.String)">
            <summary>
            激活属性修改完成处理事件
            </summary>
            <param name="propertyName"></param>
            <param name="newValue"></param>
        </member>
        <member name="E:TCSoft.Rest.RestContentBase.PropertyChanged">
            <summary>
            属性修改完成处理事件
            </summary>
        </member>
        <member name="E:TCSoft.Rest.RestContentBase.PropertyChanging">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Data.CloneEntityBase.Clone">
            <summary>
            创建一个新对象，然后将当前对象的非静态字段复制到该新对象。 
            如果字段是值类型的，则对该字段执行逐位复制。 
            如果字段是引用类型，则复制引用但不复制引用的对象；因此，原始对象及其复本引用同一对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.EntityBase`1.GetKeyValue">
            <summary>
            获取主键值
            </summary>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Data.EntityBase.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:TCSoft.Data.KeyValueEntity.Key">
            <summary>
            参数键
            </summary>
        </member>
        <member name="P:TCSoft.Data.KeyValueEntity.Value">
            <summary>
            参数键值
            </summary>
        </member>
        <member name="T:TCSoft.Data.Nh.Conventions.AggregateAttribute">
            <summary>
            This attribute is used to mark relationships which need to be eagerly fetched with the parent object,
            thus defining an aggregate in terms of DDD
            </summary>
        </member>
        <member name="T:TCSoft.Data.Nh.Conventions.RecordTableNameConvention">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Data.Nh.Conventions.RecordTableNameConvention.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            
            </summary>
            <param name="types"></param>
        </member>
        <member name="T:TCSoft.Data.Nh.Conventions.EnumConvention">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Data.Nh.Entities.EntityBase">
            <summary>
            数据库表基类
            </summary>
        </member>
        <member name="T:TCSoft.Data.Nh.Entities.EntityBase`1">
            <summary>
            Base class for entities
            </summary>
        </member>
        <member name="M:TCSoft.Data.Nh.Entities.EntityBase`1.Equals(System.Object)">
            <summary>
            如果Id相同且同other实例继承关系，那么返回true
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Nh.Entities.EntityBase`1.IsTransient(TCSoft.Data.Nh.Entities.EntityBase{`0})">
            <summary>
            非空且Id不等于0，那么返回true
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Nh.Entities.EntityBase`1.Equals(TCSoft.Data.Nh.Entities.EntityBase{`0})">
            <summary>
            如果Id相同且同other实例继承关系，那么返回true
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Nh.Entities.EntityBase`1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Data.Nh.Entities.EntityBase`1.Id">
            <summary>
            实体对象唯一标识
            </summary>
        </member>
        <member name="T:TCSoft.Data.Nh.Entities.MetaEntityBase">
            <summary>
            提供搜索优化相关的META信息
            </summary>
        </member>
        <member name="P:TCSoft.Data.Nh.Entities.MetaEntityBase.MetaTitle">
            <summary>
            Meta标题
            </summary>
        </member>
        <member name="P:TCSoft.Data.Nh.Entities.MetaEntityBase.MetaDescription">
            <summary>
            Meta描述
            </summary>
        </member>
        <member name="P:TCSoft.Data.Nh.Entities.MetaEntityBase.MetaKeywords">
            <summary>
            Meta键值
            </summary>
        </member>
        <member name="M:TCSoft.Data.Nh.INhRepository`1.Create(`0)">
            <summary>
            添加数据
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:TCSoft.Data.Nh.INhRepository`1.Update(`0)">
            <summary>
            更新数据
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:TCSoft.Data.Nh.INhRepository`1.Delete(`0)">
            <summary>
            删除数据
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:TCSoft.Data.Nh.INhRepository`1.Delete(System.Int32)">
            <summary>
            根据ID删除数据
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:TCSoft.Data.Nh.INhRepository`1.Copy(`0,`0)">
            <summary>
            复制克隆数据
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:TCSoft.Data.Nh.INhRepository`1.Flush">
            <summary>
            更新缓存
            </summary>
        </member>
        <member name="M:TCSoft.Data.Nh.INhRepository`1.Get(System.Int32)">
            <summary>
            根据ID获取数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Nh.INhRepository`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取数据
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Nh.INhRepository`1.GetNamedQuery(System.String)">
            <summary> 
            调用储存过程入库 
            </summary>
            <param name="queryName">The query can be either in HQL or SQL format.</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Nh.INhRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            数据数量
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Nh.INhRepository`1.Fetch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            返回一个的实体记录列表
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Nh.INhRepository`1.Fetch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{TCSoft.Data.Orderable{`0}})">
            <summary>
            返回一个的实体记录列表
            </summary>
            <param name="predicate"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Nh.INhRepository`1.Fetch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{TCSoft.Data.Orderable{`0}},System.Int32,System.Int32)">
            <summary>
            返回一个的实体记录列表
            </summary>
            <param name="predicate"></param>
            <param name="order"></param>
            <param name="skip"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Nh.INhRepository`1.GetPaged(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{TCSoft.Data.Orderable{`0}},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <param name="order"></param>
            <param name="pageIndex">从0开始计数</param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Data.Nh.INhRepository`1.Table">
            <summary>
            IQueryable 数据表
            </summary>
        </member>
        <member name="T:TCSoft.Data.Nh.INhTypeProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.ISingletonDependency">
            <summary>
            Base interface for services that are instantiated per shell/tenant.
            </summary>
        </member>
        <member name="T:TCSoft.IDependency">
            <summary>
            Base interface for services that are instantiated per unit of work (i.e. web request).
            </summary>
        </member>
        <member name="M:TCSoft.Data.Nh.NhRepository`1.GetPaged(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{TCSoft.Data.Orderable{`0}},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <param name="order"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Nh.Providers.AbstractDataServicesProvider.BuildConfiguration(TCSoft.Data.RawSql.IDbProviderConfig)">
            <summary>
            要求所有表都要手动添加映射类
            </summary> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Nh.Providers.AbstractDataServicesProvider.Initialize(System.Collections.Generic.IEnumerable{TCSoft.Data.Nh.INhTypeProvider})">
            <summary>Initializes a static instance of the Nop factory.</summary> 
        </member>
        <member name="T:TCSoft.Data.Nh.Providers.MsSqlCeConfiguration.CustomSqlServerCeDriver">
            <summary>
            Custom driver so that Text/NText fields are not truncated at 4000 characters
            </summary>
        </member>
        <member name="T:TCSoft.Data.Nh.ISessionFactoryHolder">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Data.Nh.ISessionFactoryHolder.GetSessionFactory(TCSoft.Data.RawSql.IDbProviderConfig)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Data.Nh.SessionFactoryHolder">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Data.Nh.SessionFactoryHolder.#ctor(System.Int32)">
            <summary>
            
            </summary> 
        </member>
        <member name="M:TCSoft.Data.Nh.SessionFactoryHolder.GetSessionFactory(TCSoft.Data.RawSql.IDbProviderConfig)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Nh.SessionFactoryHolder.GetConfiguration(TCSoft.Data.RawSql.IDbProviderConfig)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Data.Nh.SessionFactoryHolder.Logger">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Data.Nh.SessionInterceptor">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Data.RawSql.BusinessService`1">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Data.RawSql.IBusinessService`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Data.RawSql.IBusinessService`1.GetByKey(System.Object)">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IBusinessService`1.Get(System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IBusinessService`1.Get(System.String)">
            <summary>
            
            </summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IBusinessService`1.DeleteByKey(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IBusinessService`1.Exists(System.String)">
            <summary>
            
            </summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IBusinessService`1.ExcuteSql(System.String)">
            <summary>
            
            </summary>
            <param name="sqlClause"></param>
        </member>
        <member name="M:TCSoft.Data.RawSql.IBusinessService`1.CreateOrUpdate(`0,System.String[])">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IBusinessService`1.GetList(System.String,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="whereClause"></param>
            <param name="fields"></param>
            <param name="orderBy"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IBusinessService`1.ToDictionary(System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IBusinessService`1.GetPaged(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="whereClause"></param>
            <param name="fields"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IBusinessService`1.Format(System.Data.DataRow,System.Data.DataColumnCollection)">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="row"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IBusinessService`1.GetDictionary(`0)">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.BusinessService`1.#ctor(TCSoft.Data.RawSql.IDbProviderConfig)">
            <summary>
            
            </summary>
            <param name="providerConfig"></param>
        </member>
        <member name="M:TCSoft.Data.RawSql.BusinessService`1.IsIdentity">
            <summary>
            是否自动增长字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.BusinessService`1.BuildCreateSql(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.BusinessService`1.BuildUpdateSql(System.Collections.Generic.IDictionary{System.String,System.Object},System.String[])">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.BusinessService`1.Create(`0,System.String[])">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.BusinessService`1.Update(`0,System.String[])">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.BusinessService`1.ToDictionary(System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Data.RawSql.BusinessService`1.PrimaryKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Data.RawSql.BusinessService`1.SearchService">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Data.RawSql.BusinessService`1.TableName">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Data.RawSql.DbProvider">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Data.RawSql.DbProvider.MySql">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Data.RawSql.DbProvider.SqlServer">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Data.RawSql.DbProviderConfig">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Data.RawSql.IDbProviderConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Data.RawSql.IDbProviderConfig.CustomerId">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Data.RawSql.IDbProviderConfig.DataFolder">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Data.RawSql.IDbProviderConfig.DbProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Data.RawSql.IDbProviderConfig.DbConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:TCSoft.Data.RawSql.DbProviderConfig.DbProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Data.RawSql.DbProviderConfig.DbConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="T:TCSoft.Data.RawSql.IDatabaseInitialise">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Data.RawSql.IDatabaseInitialise.Initialise(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            初始化数据库
            </summary>
            <param name="tableList"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IDatabaseInitialise.AddOrAlterColumn(System.String,System.String,System.String,TCSoft.Data.RawSql.TemplateColumnDataType,System.Int32)">
            <summary>
            创建表字段
            </summary>
            <param name="tablename"></param>
            <param name="colName"></param>
            <param name="newName"></param>
            <param name="newDataType"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IDatabaseInitialise.CreateTable(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IDatabaseInitialise.DropColumn(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tablename"></param>
            <param name="colname"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IDatabaseInitialise.DropTable(System.String)">
            <summary>
            
            </summary>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IDatabaseInitialise.CheckTableExists(System.String)">
            <summary>
            
            </summary>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IDatabaseInitialise.GetColumnList(System.String)">
            <summary>
            获取当前表存在的字段
            </summary>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IDatabaseInitialise.AddColumn(System.String,System.String,TCSoft.Data.RawSql.TemplateColumnDataType,System.Int32)">
            <summary>
            
            </summary>
            <param name="tablename"></param>
            <param name="colName"></param>
            <param name="newDataType"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Data.RawSql.DatabaseInitialise">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Data.RawSql.DatabaseInitialise.#ctor(TCSoft.Data.RawSql.IDbProviderConfig)">
            <summary>
            
            </summary>
            <param name="providerConfig"></param>
        </member>
        <member name="M:TCSoft.Data.RawSql.DatabaseInitialise.CreateTable(System.String,System.String[])">
            <summary>
            创建一个只有一个Id主键的空表
            </summary>
            <param name="tablename"></param>
            <param name="defaultColumns"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.DatabaseInitialise.AddOrAlterColumn(System.String,System.String,System.String,TCSoft.Data.RawSql.TemplateColumnDataType,System.Int32)">
            <summary>
            创建一个只有一个Id主键的空表
            </summary> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.DatabaseInitialise.DropColumn(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tablename"></param>
            <param name="colname"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.DatabaseInitialise.DropTable(System.String)">
            <summary>
            
            </summary>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.DatabaseInitialise.CheckTableExists(System.String)">
            <summary>
            
            </summary>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.DatabaseInitialise.GetColumnList(System.String)">
            <summary>
            
            </summary>
            <param name="tablename"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.DatabaseInitialise.AddColumn(System.String,System.String,TCSoft.Data.RawSql.TemplateColumnDataType,System.Int32)">
            <summary>
            
            </summary>
            <param name="tablename"></param>
            <param name="colName"></param>
            <param name="newDataType"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.DatabaseInitialise.ColumHasExists(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tablename"></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Data.RawSql.IRawSqlSearchService">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Data.RawSql.IRawSqlSearchService.GetPaged(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            分页数据获取
            </summary> 
            <param name="sqlClause"></param>
            <param name="fields"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IRawSqlSearchService.GetList(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            获取列表
            </summary>
            <param name="whereClause"></param>
            <param name="fields"></param>
            <param name="orderBy"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IRawSqlSearchService.GetListWithSingleValue(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            获取指定类型数据列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName"></param>
            <param name="whereClause"></param>
            <param name="fields"></param>
            <param name="orderBy"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IRawSqlSearchService.GetSingleObject(System.String)">
            <summary>
            
            </summary>
            <param name="sqlClause"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IRawSqlSearchService.GetSingle(System.String)">
            <summary>
            
            </summary>
            <param name="sqlClause"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IRawSqlSearchService.Count(System.String,System.String)">
            <summary>
            记录条数获取
            </summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IRawSqlSearchService.Exists(System.String,System.String)">
            <summary>
            数据是否存在
            </summary>
            <param name="whereClause"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IRawSqlSearchService.ExcuteSql(System.String)">
            <summary>
            
            </summary>
            <param name="sqlClause"></param>
        </member>
        <member name="M:TCSoft.Data.RawSql.IRawSqlSearchService.Query(System.String)">
            <summary>
            
            </summary>
            <param name="sqlClause"></param>
        </member>
        <member name="M:TCSoft.Data.RawSql.IRawSqlSearchService.QueryTable(System.String)">
            <summary>
            
            </summary>
            <param name="sqlClause"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IRawSqlSearchService.Format``1(System.Data.DataRow,System.Data.DataColumnCollection)">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="row"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.IRawSqlSearchService.GetDictionary``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Data.RawSql.IRawSqlSearchService.DbProviderConfig">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Data.RawSql.RawSqlSearchService">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Data.RawSql.RawSqlSearchService.#ctor(TCSoft.Data.RawSql.IDbProviderConfig)">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Data.RawSql.RawSqlSearchService.GetList(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="whereClause"></param>
            <param name="fields"></param>
            <param name="orderBy">不包含order by 关键字</param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.RawSqlSearchService.GetSingleObject(System.String)">
            <summary>
            
            </summary>
            <param name="sqlClause"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.RawSqlSearchService.ExcuteSql(System.String)">
            <summary>
            
            </summary>
            <param name="sqlClause"></param>
        </member>
        <member name="M:TCSoft.Data.RawSql.RawSqlSearchService.Query(System.String)">
            <summary>
            
            </summary>
            <param name="sqlClause"></param>
        </member>
        <member name="M:TCSoft.Data.RawSql.RawSqlSearchService.DeleteByKey(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="tablename"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.RawSqlSearchService.GetByKey(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="tablename"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.RawSqlSearchService.Format``1(System.Data.DataRow,System.Data.DataColumnCollection)">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="row"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.RawSql.RawSqlSearchService.GetDictionary``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Data.RawSql.RawSqlSearchService.DbProviderConfig">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Data.RawSql.TemplateColumnDataType">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Data.RawSql.TemplateDataSourceType.Api">
            <summary>
            派送自定接口的类型解析
            </summary>
        </member>
        <member name="F:TCSoft.Data.RawSql.TemplateDataSourceType.StoreInfo">
            <summary>
            派送自定接口的类型解析
            </summary>
        </member>
        <member name="F:TCSoft.Data.RawSql.TemplateDataSourceType.PayMode">
            <summary>
            派送自定接口的类型解析
            </summary>
        </member>
        <member name="F:TCSoft.Data.RawSql.TemplateDataSourceType.StringList">
            <summary>
            使用,分割多种类型
            </summary>
        </member>
        <member name="F:TCSoft.Data.RawSql.TemplateDataSourceType.String">
            <summary>
             
            </summary>
        </member>
        <member name="T:TCSoft.Data.ComboxListItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Data.ComboxListItem.Value">
            
             值
            
        </member>
        <member name="P:TCSoft.Data.ComboxListItem.Text">
            
             显示的文本
            
        </member>
        <member name="T:TCSoft.Data.Repository`1">
            <summary>
            数据访问访问层基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TCSoft.Data.Repository`1.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionStr"></param>
        </member>
        <member name="M:TCSoft.Data.Repository`1.GetParameters(`0,System.Boolean)">
            <summary>
            初始化添加更新参数
            </summary> 
            <param name="model"></param>
            <param name="isUpdate"></param>
        </member>
        <member name="M:TCSoft.Data.Repository`1.FormatModel(System.Data.DataRow)">
            <summary>
            实例化
            </summary>
            <param name="reader"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.GetPaged(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            分页数据获取
            </summary>
            <param name="whereClause"></param>
            <param name="fields"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.GetModel(System.Int32)">
            <summary>
            根据Id获取实例
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.GetSingle(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            
            </summary>
            <param name="sqlClause"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.GetFirstOrDefault(System.String)">
            <summary>
            
            </summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.GetList(System.String,System.String,System.Int32)">
            <summary>
            获取列表
            </summary>
            <param name="whereClause"></param> 
            <param name="orderBy"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.Count(System.String)">
            <summary>
            记录条数获取
            </summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.Exists(System.String)">
            <summary>
            
            </summary>
            <param name="whereClause"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.Exists(System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            数据是否存在
            </summary>
            <param name="whereClause"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.Create(`0)">
            <summary>
            表: 的添加方法｜｜表描述：臂长操作
            </summary>
            <param name="model">ArmlenoperateModel 实例</param> 
            <returns>返回结果：0(添加错误)，>0(添加成功)</returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.Create(`0,System.Data.SqlClient.SqlTransaction)">
            <summary>
            表: 的添加方法｜｜表描述：臂长操作
            </summary>
            <param name="model">ArmlenoperateModel 实例</param>
            <param name="transaction">数据库事务对象</param>
            <returns>返回结果：0(添加错误)，>0(添加成功)</returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.Update(`0)">
            <summary>
            表:T的修改方法｜｜表描述：臂长操作
            </summary>
            <param name="model">T 实例</param> 
            <returns>返回结果：0(修改错误)，>0(修改成功)</returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.Update(`0,System.Data.SqlClient.SqlTransaction)">
            <summary>
            表:T 的修改方法｜｜表描述：臂长操作
            </summary>
            <param name="model">T 实例</param>
            <param name="transaction">数据库事务对象</param>
            <returns>返回结果：0(修改错误)，>0(修改成功)</returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.Delete(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.Delete(System.Int32,System.Data.SqlClient.SqlTransaction)">
            <summary>
            表:d_ArmLenOperate的删除方法｜｜表描述：臂长操作
            </summary>
            <param name="id">主键ID</param> 
            <param name="transaction">数据库事务对象</param>
            <returns>返回结果：0(删除错误)，>0(删除成功)</returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.DeleteByField``1(System.String,`0,System.Data.SqlClient.SqlTransaction)">
            <summary>
            根据黑匣子编号删除记录
            </summary>
            <param name="fieldValue"></param>
            <param name="transaction"></param>
            <param name="fieldname"></param>
        </member>
        <member name="M:TCSoft.Data.Repository`1.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand that returns the first column of the first record against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:TCSoft.Data.Repository`1.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Prepare a command for execution
            </summary>
            <param name="cmd">SqlCommand object</param>
            <param name="conn">SqlConnection object</param>
            <param name="trans">SqlTransaction object</param>
            <param name="cmdType">Cmd type e.g. stored procedure or text</param>
            <param name="cmdText">Command text, e.g. Select * from Products</param>
            <param name="cmdParms">SqlParameters to use in the command</param>
        </member>
        <member name="M:TCSoft.Data.Repository`1.GetFieldType(System.String)">
            <summary>
            
            </summary>
            <param name="sqlType"></param>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Data.Repository`1.Logger">
            <summary>
            日志提供接口
            </summary>
        </member>
        <member name="P:TCSoft.Data.Repository`1.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:TCSoft.Data.Repository`1.PrimaryKeyName">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="P:TCSoft.Data.Repository`1.UpdateSqlClause">
            <summary>
            Update 语句 UPDATE $TableName$ ..
            </summary>
        </member>
        <member name="P:TCSoft.Data.Repository`1.CreateSqlClause">
            <summary>
            INSERT 语句 INSERT $TableName$(,,)VALUES(,,)
            </summary>
        </member>
        <member name="T:TCSoft.Enums.AsynchronousCallStatus">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Enums.BindingMoblieStatus">
            <summary>
            绑定手机号码状态 0 未绑定 1 绑定申请 2 绑定成功
            </summary>
        </member>
        <member name="F:TCSoft.Enums.BindingMoblieStatus.None">
            <summary>
            为绑定
            </summary>
        </member>
        <member name="F:TCSoft.Enums.BindingMoblieStatus.WaitBinding">
            <summary>
            等待绑定中
            </summary>
        </member>
        <member name="F:TCSoft.Enums.BindingMoblieStatus.HasBinding">
            <summary>
            已经绑定
            </summary>
        </member>
        <member name="T:TCSoft.Enums.ChoseYesOrNo">
            <summary>
            ChoseYesOrNo
            </summary>
        </member>
        <member name="T:TCSoft.Enums.DataStatus">
            <summary>
            数据状态
            </summary>
        </member>
        <member name="F:TCSoft.Enums.DataStatus.InValid">
            <summary>
            过期、无效的、已经关闭
            </summary>
        </member>
        <member name="F:TCSoft.Enums.DataStatus.Valid">
            <summary>
            有效、正在使用、已经开启
            </summary>
        </member>
        <member name="F:TCSoft.Enums.DataStatus.Other">
            <summary>
            其它
            </summary>
        </member>
        <member name="F:TCSoft.Enums.DelFlag.Normal">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:TCSoft.Enums.DelFlag.Deleted">
            <summary>
            已经删除
            </summary>
        </member>
        <member name="T:TCSoft.Enums.FuncListen">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.FuncListen.GetLoginUserId">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.FuncListen.GetVisitPath">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Enums.Hr.HrDepartmentType">
            <summary>
            部门类别
            </summary>
        </member>
        <member name="F:TCSoft.Enums.Hr.HrDepartmentType.分公司">
            <summary>
            分公司
            </summary>
        </member>
        <member name="F:TCSoft.Enums.Hr.HrDepartmentType.部门">
            <summary>
            部门
            </summary>
        </member>
        <member name="F:TCSoft.Enums.Hr.HrDepartmentType.组">
            <summary>
            组
            </summary>
        </member>
        <!-- 对于成员“T:TCSoft.Enums.HrEnum.HrEmployeedetailCountryType”忽略有格式错误的 XML 注释 -->
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailCountryType.中国">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailCountryType.美国">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailCountryType.加拿大">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailCountryType.日本">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailCountryType.韩国">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailCountryType.新加坡">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailCountryType.英国">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailCountryType.法国">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailCountryType.德国">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailCountryType.意大利">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailCountryType.葡萄牙">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailCountryType.西班牙">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailCountryType.澳大利亚">
            <summary>
            
            </summary>
        </member>
        <!-- 对于成员“T:TCSoft.Enums.HrEnum.HrEmployeedetailRegisteredType”忽略有格式错误的 XML 注释 -->
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailRegisteredType.本地城镇">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailRegisteredType.本地农村">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailRegisteredType.外地城镇">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailRegisteredType.外地农村">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailRegisteredType.国外户口">
            <summary>
            
            </summary>
        </member>
        <!-- 对于成员“T:TCSoft.Enums.HrEnum.HrEmployeedetailMarriage”忽略有格式错误的 XML 注释 -->
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailMarriage.未婚">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailMarriage.已婚">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailMarriage.离婚">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailMarriage.丧偶">
            <summary>
            
            </summary>
        </member>
        <!-- 对于成员“T:TCSoft.Enums.HrEnum.HrEmployeedetailPolicy”忽略有格式错误的 XML 注释 -->
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailPolicy.群众">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailPolicy.团员">
            <summary> 
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailPolicy.党员">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailPolicy.民主党成员">
            <summary>
            
            </summary>
        </member>
        <!-- 对于成员“T:TCSoft.Enums.HrEnum.HrEmployeedetailBloodType”忽略有格式错误的 XML 注释 -->
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailBloodType.A型">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailBloodType.B型">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailBloodType.O型">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailBloodType.AB型">
            <summary>
            </summary>
        </member>
        <!-- 对于成员“T:TCSoft.Enums.HrEnum.HrEmployeedetailEducation”忽略有格式错误的 XML 注释 -->
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailEducation.初中">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailEducation.中专">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailEducation.高中">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailEducation.大专">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailEducation.本科">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailEducation.研究生">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailEducation.博士">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailEducation.博士后">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailEducation.小学">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Enums.HrEnum.HrEmployeedetailDegree">
             <summary> 
            HR_Employeedetail_Degree 学位 (0 学士,1 硕士,2 博士,3 其它)
             </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailDegree.学士">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailDegree.硕士">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailDegree.博士">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeedetailDegree.其它">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Enums.HrEnum.HrEmployeeState">
            <summary>
            HR_EmployeeState 员工状态 (0聘用,1实习,2见习,3外派,4停薪留职,5试用,,6隐藏,-1离职中,-9已离职,-10=已辞退,-11=已流失)
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeeState.聘用">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeeState.实习">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeeState.见习">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeeState.外派">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeeState.停薪留职">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeeState.试用">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeeState.隐藏">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeeState.离职中">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeeState.已离职">
            <summary>
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeeState.已辞退">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.HrEnum.HrEmployeeState.已流失">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Enums.HrEnum.HrEmployeedetailNativePlace">
            <summary>
            员工国籍
            </summary>
        </member>
        <member name="T:TCSoft.Enums.HrEnum.HrEmployeedetailNation">
            <summary>
            员工民族
            </summary>
        </member>
        <member name="T:TCSoft.Enums.Hr.InternalUserRoleType">
            <summary>
            内置角色类型
            </summary>
        </member>
        <member name="F:TCSoft.Enums.Hr.InternalUserRoleType.InternalSupperAdmin">
            <summary>
            系统超级管理员
            </summary>
        </member>
        <member name="F:TCSoft.Enums.Hr.InternalUserRoleType.InternalCustomerAdmin">
            <summary>
            商家管理员
            </summary>
        </member>
        <member name="F:TCSoft.Enums.Hr.InternalUserRoleType.InternalCustomerEmployee">
            <summary>
            商家员工
            </summary>
        </member>
        <member name="F:TCSoft.Enums.Hr.InternalUserRoleType.RegisterUser">
            <summary>
            注册用户
            </summary>
        </member>
        <member name="F:TCSoft.Enums.Hr.InternalUserRoleType.None">
            <summary>
             
            </summary> 
        </member>
        <member name="T:TCSoft.Enums.ModuleRightsType">
            <summary>
            模块权限类型
            </summary>
        </member>
        <member name="F:TCSoft.Enums.ModuleRightsType.Common">
            <summary>
            谁都可以查看
            </summary>
        </member>
        <member name="F:TCSoft.Enums.ModuleRightsType.Assignabled">
            <summary>
            可分配的
            </summary>
        </member>
        <member name="F:TCSoft.Enums.ModuleRightsType.NonAssignabled">
            <summary>
            不可分配的权限，系统角色独有
            </summary>
        </member>
        <member name="T:TCSoft.Enums.RightHrType">
            <summary>
            权限的人事类型，0 人事组织不相关 1:员工 2:部门 4:行政级别 8:部门岗位  32768:其他
            </summary> 
        </member>
        <member name="F:TCSoft.Enums.RightHrType.None">
            <summary>
            0 人事组织不相关
            </summary>
        </member>
        <member name="F:TCSoft.Enums.RightHrType.Employee">
            <summary>
            1  设置指定员工，【行政级别，岗位，角色】四维权限表
            </summary>
        </member>
        <member name="F:TCSoft.Enums.RightHrType.Department">
            <summary>
            2  部门
            </summary>
        </member>
        <member name="F:TCSoft.Enums.RightHrType.Level">
            <summary>
            4 行政级别
            </summary>
        </member>
        <member name="F:TCSoft.Enums.RightHrType.Position">
            <summary>
            8 部门岗位
            </summary>
        </member>
        <member name="F:TCSoft.Enums.RightHrType.Other">
            <summary>
            32768  其他
            </summary>
        </member>
        <member name="T:TCSoft.Enums.RightValue">
            <summary>
            Ȩ��ֵ
            </summary>
        </member>
        <member name="T:TCSoft.Enums.TreeLevel">
            <summary>
            树的层级（从1开始计算）
            </summary>
        </member>
        <member name="F:TCSoft.Enums.TreeLevel.One">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.TreeLevel.Two">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.TreeLevel.Three">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.TreeLevel.Four">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.TreeLevel.Five">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Enums.TreeLevel.Default">
            <summary>
            默认层级为一级
            </summary>
        </member>
        <member name="T:TCSoft.Enums.UserDataStatus">
            <summary>
            系统用户状态
            </summary>
        </member>
        <member name="F:TCSoft.Enums.UserDataStatus.Normarl">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:TCSoft.Enums.UserDataStatus.Locked">
            <summary>
            已经锁住
            </summary>
        </member>
        <member name="F:TCSoft.Enums.UserDataStatus.UnVerify">
            <summary>
            已经提交单未验证
            </summary>
        </member>
        <member name="F:TCSoft.Enums.UserDataStatus.UnInitAccount">
            <summary>
            未设置账户基本信息
            </summary> 
        </member>
        <member name="F:TCSoft.Enums.UserDataStatus.WxAccountUnBinding">
            <summary>
            微信账号解除绑定
            </summary>
        </member>
        <member name="F:TCSoft.Enums.UserDataStatus.Deleted">
            <summary>
            已经删除
            </summary>
        </member>
        <member name="T:TCSoft.IPerHttpRequestDependency">
            <summary>
            Base interface for services that are instantiated per shell/tenant.
            </summary>
        </member>
        <member name="T:TCSoft.IUnitOfWorkDependency">
            <summary>
            Base interface for services that may *only* be instantiated in a unit of work.
            This interface is used to guarantee they are not accidentally referenced by a singleton dependency.
            </summary>
        </member>
        <member name="T:TCSoft.INonDependency">
            <summary>
             不参与依赖注入
            </summary>
        </member>
        <member name="T:TCSoft.Collections.QueryableExtentsion">
            <summary>
            IQueryable列表扩展方法
            </summary>
        </member>
        <member name="M:TCSoft.Collections.QueryableExtentsion.GetPagedFromQueryable``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            获取分页列表，queryable从0开始计数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="totalCount"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.QueryableExtentsion.GetPaged``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            获取分页列表，IEnumerable从0开始计数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="totalCount"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.QueryableExtentsion.ToView``2(TCSoft.Collections.IPageOfItems{``0},System.Func{``0,``1})">
            <summary>
            将类型T的分页数据列表转换为类型TView的分页数据列表
            </summary>
            <typeparam name="T">原始数据类型</typeparam>
            <typeparam name="TView">返回的数据类型</typeparam>
            <param name="items">数据列表</param>
            <param name="selector">数据转换选择器</param>
            <returns>返回TView的分页数据列表</returns>
        </member>
        <member name="T:TCSoft.CommonHelper">
            <summary>
            Represents a common helper
            </summary>
        </member>
        <member name="M:TCSoft.CommonHelper.EnsureSubscriberEmailOrThrow(System.String)">
            <summary>
            Ensures the subscriber email or throw.
            </summary>
            <param name="email">The email.</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.CommonHelper.IsValidEmail(System.String)">
            <summary>
            Verifies that a string is in valid e-mail format
            </summary>
            <param name="email">Email to verify</param>
            <returns>true if the string is a valid e-mail address and false if it's not</returns>
        </member>
        <member name="M:TCSoft.CommonHelper.GenerateRandomDigitCode(System.Int32)">
            <summary>
            Generate random digit code
            </summary>
            <param name="length">Length</param>
            <returns>Result string</returns>
        </member>
        <member name="M:TCSoft.CommonHelper.GenerateRandomInteger(System.Int32,System.Int32)">
            <summary>
            Returns an random interger number within a specified rage
            </summary>
            <param name="min">Minimum number</param>
            <param name="max">Maximum number</param>
            <returns>Result</returns>
        </member>
        <member name="M:TCSoft.CommonHelper.EnsureMaximumLength(System.String,System.Int32,System.String)">
            <summary>
            Ensure that a string doesn't exceed maximum allowed length
            </summary>
            <param name="str">Input string</param>
            <param name="maxLength">Maximum length</param>
            <param name="postfix">A string to add to the end if the original string was shorten</param>
            <returns>Input string if its lengh is OK; otherwise, truncated input string</returns>
        </member>
        <member name="M:TCSoft.CommonHelper.EnsureNumericOnly(System.String)">
            <summary>
            Ensures that a string only contains numeric values
            </summary>
            <param name="str">Input string</param>
            <returns>Input string with only numeric values, empty string if input is null/empty</returns>
        </member>
        <member name="M:TCSoft.CommonHelper.EnsureNotNull(System.String)">
            <summary>
            Ensure that a string is not null
            </summary>
            <param name="str">Input string</param>
            <returns>Result</returns>
        </member>
        <member name="M:TCSoft.CommonHelper.AreNullOrEmpty(System.String[])">
            <summary>
            Indicates whether the specified strings are null or empty strings
            </summary>
            <param name="stringsToValidate">Array of strings to validate</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:TCSoft.CommonHelper.GetTrustLevel">
            <summary>
            Finds the trust level of the running application (http://blogs.msdn.com/dmitryr/archive/2007/01/23/finding-out-the-current-trust-level-in-asp-net.aspx)
            </summary>
            <returns>The current trust level.</returns>
        </member>
        <member name="M:TCSoft.CommonHelper.ConvertEnum(System.String)">
            <summary>
            Convert enum for front-end
            </summary>
            <param name="str">Input string</param>
            <returns>Converted string</returns>
        </member>
        <member name="T:TCSoft.Config.DefaultConfigFileManager">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Config.DefaultConfigFileManager.m_configfilepath">
            <summary>
            文件所在路径变量
            </summary>
        </member>
        <member name="F:TCSoft.Config.DefaultConfigFileManager.m_configinfo">
            <summary>
            临时配置对象变量
            </summary>
        </member>
        <member name="F:TCSoft.Config.DefaultConfigFileManager.m_lockHelper">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="M:TCSoft.Config.DefaultConfigFileManager.LoadConfig(System.DateTime@,System.String,TCSoft.Config.IConfigInfo)">
            <summary>
            加载(反序列化)指定对象类型的配置对象
            </summary>
            <param name="fileoldchange">文件加载时间</param>
            <param name="configFilePath">配置文件所在路径</param>
            <param name="configinfo">相应的变量 注:该参数主要用于设置m_configinfo变量 和 获取类型.GetType()</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Config.DefaultConfigFileManager.LoadConfig(System.DateTime@,System.String,TCSoft.Config.IConfigInfo,System.Boolean)">
            <summary>
            加载(反序列化)指定对象类型的配置对象
            </summary>
            <param name="fileoldchange">文件加载时间</param>
            <param name="configFilePath">配置文件所在路径(包括文件名)</param>
            <param name="configinfo">相应的变量 注:该参数主要用于设置m_configinfo变量 和 获取类型.GetType()</param>
            <param name="checkTime">是否检查并更新传递进来的"文件加载时间"变量</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Config.DefaultConfigFileManager.DeserializeInfo(System.String,System.Type)">
            <summary>
            反序列化指定的类
            </summary>
            <param name="configfilepath">config 文件的路径</param>
            <param name="configtype">相应的类型</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Config.DefaultConfigFileManager.SaveConfig">
            <summary>
            保存配置实例(虚方法需继承)
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Config.DefaultConfigFileManager.SaveConfig(System.String,TCSoft.Config.IConfigInfo)">
            <summary>
            保存(序列化)指定路径下的配置文件
            </summary>
            <param name="configFilePath">指定的配置文件所在的路径(包括文件名)</param>
            <param name="configinfo">被保存(序列化)的对象</param>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Config.DefaultConfigFileManager.StorageProvider">
            <summary>
            存储信息接口提供者
            </summary>
        </member>
        <member name="P:TCSoft.Config.DefaultConfigFileManager.DirectoryName">
            <summary>
            配置文件存储目录获取
            </summary>
        </member>
        <member name="P:TCSoft.Config.DefaultConfigFileManager.ConfigFilePath">
            <summary>
            文件所在路径
            </summary>
        </member>
        <member name="P:TCSoft.Config.DefaultConfigFileManager.ConfigInfo">
            <summary>
            临时配置对象
            </summary>
        </member>
        <member name="T:TCSoft.Config.EncryptContent">
            <summary>
             加密内容
            </summary>
        </member>
        <member name="T:TCSoft.Config.IConfigInfo">
            <summary>
            配置信息基类
            </summary>
        </member>
        <member name="P:TCSoft.Config.EncryptContent.Content">
            <summary>
            配置内容
            </summary>
        </member>
        <member name="T:TCSoft.Config.IConfigFileManager">
            <summary>
            配置文件管理接口定义
            </summary>
        </member>
        <member name="M:TCSoft.Config.IConfigFileManager.LoadConfig">
            <summary>
            加载配置文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Config.IConfigFileManager.SaveConfig">
            <summary>
            保存配置文件
            </summary>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Config.SerializationHelper">
            <summary>
            使用编码格式为UTF8序列化与反序列化实现辅助类
            </summary>
        </member>
        <member name="M:TCSoft.Config.SerializationHelper.GetSerializer(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:TCSoft.Config.SerializationHelper.Load(System.Type,System.String)">
            <summary>
            反序列化,从XML文件中反序列化数据
            </summary>
            <param name="type">对象类型</param>
            <param name="filename">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Config.SerializationHelper.Load``1(System.String)">
            <summary>
            反序列化,从XML文件中反序列化数据
            </summary>
            <param name="filename"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Config.SerializationHelper.Save(System.Object,System.String)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <param name="filename">文件路径</param>
        </member>
        <member name="M:TCSoft.Config.SerializationHelper.Serialize(System.Object)">
            <summary>
            xml序列化成字符串
            </summary>
            <param name="obj">对象</param>
            <returns>xml字符串</returns>
        </member>
        <member name="M:TCSoft.Config.SerializationHelper.Deserialize(System.Type,System.String)">
            <summary>
            反序列化
            </summary>
            <param name="type"></param>
            <param name="s"></param>
            <returns></returns>
            <exception cref="T:System.Exception">反序列化化异常</exception>
        </member>
        <member name="M:TCSoft.Config.SerializationHelper.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns>如果反序列化化成功，那么返回类型T的实体数据，否则返回Null</returns>
        </member>
        <member name="T:TCSoft.CustomTableNameAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.CustomTableNameAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="P:TCSoft.CustomTableNameAttribute.TableName">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.CustomDescriptionAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.CustomDescriptionAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="description"></param>
        </member>
        <member name="P:TCSoft.CustomDescriptionAttribute.Description">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Data.EntityBaseExtenstions">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Data.EntityBaseExtenstions.DeepClone``1(TCSoft.Data.CloneEntityBase)">
            <summary>
            创建一个新对象，然后将当前对象的非静态字段复制到该新对象。 
            如果字段是值类型的，则对该字段执行逐位复制。 
            如果字段是引用类型，则复制引用但不复制引用的对象；因此，原始对象及其复本引用同一对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.EntityBaseExtenstions.ToJson(TCSoft.Data.EntityBase)">
            <summary>
            派生自EntityBase的对象转换为JSOn格式字符串
            </summary>
            <param name="entity"></param>
            <returns>JSON格式字符串</returns>
        </member>
        <member name="M:TCSoft.Data.EntityBaseExtenstions.FromJson``1(System.String)">
            <summary>
            从JSON格式字符串中反序列化实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonContent">JSON格式字符串</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.EntityBaseExtenstions.Clone``1(TCSoft.Data.EntityBase)">
            <summary>
            创建一个新对象，然后将当前对象的非静态字段复制到该新对象。 
            如果字段是值类型的，则对该字段执行逐位复制。 
            如果字段是引用类型，则复制引用但不复制引用的对象；因此，原始对象及其复本引用同一对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Data.Orderable`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TCSoft.Data.Orderable`1.#ctor(System.Linq.IQueryable{`0})">
            <summary>
            
            </summary>
            <param name="enumerable"></param>
        </member>
        <member name="M:TCSoft.Data.Orderable`1.Asc``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            
            </summary>
            <param name="keySelector"></param>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Orderable`1.Asc``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}})">
            <summary>
            
            </summary>
            <param name="keySelector1"></param>
            <param name="keySelector2"></param>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Orderable`1.Asc``3(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{`0,``2}})">
            <summary>
            
            </summary>
            <param name="keySelector1"></param>
            <param name="keySelector2"></param>
            <param name="keySelector3"></param>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Orderable`1.Desc``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            
            </summary>
            <param name="keySelector"></param>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Orderable`1.Desc``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}})">
            <summary>
            
            </summary>
            <param name="keySelector1"></param>
            <param name="keySelector2"></param>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Data.Orderable`1.Desc``3(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{`0,``2}})">
            <summary>
            
            </summary>
            <param name="keySelector1"></param>
            <param name="keySelector2"></param>
            <param name="keySelector3"></param>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Data.Orderable`1.Queryable">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Enums.AttachmentType">
            <summary>
            附件类型
            </summary>
        </member>
        <member name="F:TCSoft.Enums.AttachmentType.Documents">
            <summary>
            文档=401
            </summary>
        </member>
        <member name="F:TCSoft.Enums.AttachmentType.ShopLogo">
            <summary>
            店铺Logo
            </summary>
        </member>
        <member name="F:TCSoft.Enums.AttachmentType.Images">
            <summary>
            图片
            </summary>
        </member>
        <member name="F:TCSoft.Enums.AttachmentType.WxNewsImages">
            <summary>
            图片
            </summary>
        </member>
        <member name="T:TCSoft.Enums.Sex">
            <summary>
            性别
            </summary>
        </member>
        <member name="T:TCSoft.IWebHelper">
            <summary>
            Represents a common helper
            </summary>
        </member>
        <member name="M:TCSoft.IWebHelper.GetUrlReferrer">
            <summary>
            Get URL referrer
            </summary>
            <returns>URL referrer</returns>
        </member>
        <member name="M:TCSoft.IWebHelper.UrlEncode(System.String)">
            <summary>
            URL地址编码
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IWebHelper.GetCurrentIpAddress">
            <summary>
            Get context IP address
            </summary>
            <returns>URL referrer</returns>
        </member>
        <member name="M:TCSoft.IWebHelper.GetThisPageUrl(System.Boolean)">
            <summary>
            Gets this page name
            </summary>
            <param name="includeQueryString">Value indicating whether to include query strings</param>
            <returns>Page name</returns>
        </member>
        <member name="M:TCSoft.IWebHelper.GetThisPageUrl(System.Boolean,System.Boolean)">
            <summary>
            Gets this page name
            </summary>
            <param name="includeQueryString">Value indicating whether to include query strings</param>
            <param name="useSsl">Value indicating whether to get SSL protected page</param>
            <returns>Page name</returns>
        </member>
        <member name="M:TCSoft.IWebHelper.IsCurrentConnectionSecured">
            <summary>
            Gets a value indicating whether current connection is secured
            </summary>
            <returns>true - secured, false - not secured</returns>
        </member>
        <member name="M:TCSoft.IWebHelper.ServerVariables(System.String)">
            <summary>
            Gets server variable by name
            </summary>
            <param name="name">Name</param>
            <returns>Server variable</returns>
        </member>
        <member name="M:TCSoft.IWebHelper.GetStoreHost(System.Boolean)">
            <summary>
            Gets store host location,以斜杠结尾，比如：http://www.baidu.com/
            </summary>
            <param name="useSsl">Use SSL</param>
            <returns>Store host location</returns>
        </member>
        <member name="M:TCSoft.IWebHelper.GetStoreLocation">
            <summary>
            Gets store location
            </summary>
            <returns>Store location</returns>
        </member>
        <member name="M:TCSoft.IWebHelper.GetStoreLocation(System.Boolean)">
            <summary>
            Gets store location
            </summary>
            <param name="useSsl">Use SSL</param>
            <returns>Store location</returns>
        </member>
        <member name="M:TCSoft.IWebHelper.IsStaticResource(System.Web.HttpRequest)">
            <summary>
            Returns true if the requested resource is one of the typical resources that needn't be processed by the cms engine.
            </summary>
            <param name="request">HTTP Request</param>
            <returns>True if the request targets a static resource file.</returns>
            <remarks>
            These are the file extensions considered to be static resources:
            .css
            .gif
            .png 
            .jpg
            .jpeg
            .js
            .axd
            .ashx
            </remarks>
        </member>
        <member name="M:TCSoft.IWebHelper.MapPath(System.String)">
            <summary>
            Maps a virtual path to a physical disk path.
            </summary>
            <param name="path">The path to map. E.g. "~/bin"</param>
            <returns>The physical path. E.g. "c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="M:TCSoft.IWebHelper.ModifyQueryString(System.String,System.String,System.String)">
            <summary>
            Modifies query string
            </summary>
            <param name="url">Url to modify</param>
            <param name="queryStringModification">Query string modification</param>
            <param name="anchor">Anchor</param>
            <returns>New url</returns>
        </member>
        <member name="M:TCSoft.IWebHelper.RemoveQueryString(System.String,System.String)">
            <summary>
            Remove query string from url
            </summary>
            <param name="url">Url to modify</param>
            <param name="queryString">Query string to remove</param>
            <returns>New url</returns>
        </member>
        <member name="M:TCSoft.IWebHelper.QueryString(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IWebHelper.RestartAppDomain(System.Boolean,System.String)">
            <summary>
            Restart application domain
            </summary>
            <param name="makeRedirect">A value indicating whether </param>
            <param name="redirectUrl">Redirect URL; empty string if you want to redirect to the current page URL</param>
        </member>
        <member name="M:TCSoft.IWebHelper.GetParamValueByName(System.String)">
            <summary>
            获取URL参数或Form表单、ServerVariables、Cookies的值
            </summary>
            <param name="name">参数名</param>
            <returns>string</returns>
        </member>
        <member name="P:TCSoft.IWebHelper.IsRequestBeingRedirected">
            <summary>
            Gets a value that indicates whether the client is being redirected to a new location
            </summary>
        </member>
        <member name="T:TCSoft.Media.WavPlayer">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Media.WavPlayer._fileByteses">
            <summary>
            文件缓存数据
            </summary>
        </member>
        <member name="M:TCSoft.Media.WavPlayer.PlayAsync(System.Byte[])">
            <summary>
            
            </summary> 
        </member>
        <member name="M:TCSoft.Media.WavPlayer.PlayAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="filenameList"></param>
        </member>
        <member name="M:TCSoft.Media.WavPlayer.Play(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="filenameList"></param>
        </member>
        <member name="M:TCSoft.Media.WavPlayer.PlayAsyncByMemory(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="filenameList"></param>
        </member>
        <member name="M:TCSoft.Media.WavPlayer.PlayAsync(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            
            </summary> 
        </member>
        <member name="T:TCSoft.Media.WavPlayer.SoundFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Media.WavPlayer.SoundFlags.SND_SYNC">
            <summary>play synchronously (default)</summary>
        </member>
        <member name="F:TCSoft.Media.WavPlayer.SoundFlags.SND_ASYNC">
            <summary>play asynchronously</summary>
        </member>
        <member name="F:TCSoft.Media.WavPlayer.SoundFlags.SND_NODEFAULT">
            <summary>silence (!default) if sound not found</summary>
        </member>
        <member name="F:TCSoft.Media.WavPlayer.SoundFlags.SND_MEMORY">
            <summary>pszSound points to a memory file</summary>
        </member>
        <member name="F:TCSoft.Media.WavPlayer.SoundFlags.SND_LOOP">
            <summary>loop the sound until next sndPlaySound</summary>
        </member>
        <member name="F:TCSoft.Media.WavPlayer.SoundFlags.SND_NOSTOP">
            <summary>don’t stop any currently playing sound</summary>
        </member>
        <member name="F:TCSoft.Media.WavPlayer.SoundFlags.SND_PURGE">
            <summary>Stop Playing Wave</summary>
        </member>
        <member name="F:TCSoft.Media.WavPlayer.SoundFlags.SND_NOWAIT">
            <summary>don’t wait if the driver is busy</summary>
        </member>
        <member name="F:TCSoft.Media.WavPlayer.SoundFlags.SND_ALIAS">
            <summary>name is a registry alias</summary>
        </member>
        <member name="F:TCSoft.Media.WavPlayer.SoundFlags.SND_ALIAS_ID">
            <summary>alias is a predefined id</summary>
        </member>
        <member name="F:TCSoft.Media.WavPlayer.SoundFlags.SND_FILENAME">
            <summary>name is file name</summary>
        </member>
        <member name="F:TCSoft.Media.WavPlayer.SoundFlags.SND_RESOURCE">
            <summary>name is resource name or atom</summary>
        </member>
        <member name="T:TCSoft.Models.ISearchHit">
            <summary>
            搜索封装
            </summary>
        </member>
        <member name="T:TCSoft.Models.KeySearchHit">
            <summary>
            包含键值的查询条件
            </summary>
        </member>
        <member name="P:TCSoft.Models.KeySearchHit.Key">
            <summary>
            键值
            </summary>
        </member>
        <member name="T:TCSoft.Models.PageIndexChangedHit">
            <summary>
            页面信息修改
            </summary>
        </member>
        <member name="T:TCSoft.Models.PropertyTrackInfo">
            <summary>
            属性修改跟踪信息
            </summary>
        </member>
        <member name="P:TCSoft.Models.PropertyTrackInfo.Status">
            <summary>
            属性跟踪状态
            </summary>
        </member>
        <member name="P:TCSoft.Models.PropertyTrackInfo.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:TCSoft.Models.PropertyTrackInfo.OldValue">
            <summary>
            修改前值
            </summary>
        </member>
        <member name="P:TCSoft.Models.PropertyTrackInfo.NewValue">
            <summary>
            修改后值
            </summary>
        </member>
        <member name="T:TCSoft.Models.PropertyTrackStatus">
            <summary>
            属性跟踪状态
            </summary>
        </member>
        <member name="F:TCSoft.Models.PropertyTrackStatus.Unchanged">
            <summary>
            未修改
            </summary>
        </member>
        <member name="F:TCSoft.Models.PropertyTrackStatus.Added">
            <summary>
            最新添加
            </summary>
        </member>
        <member name="F:TCSoft.Models.PropertyTrackStatus.Deleted">
            <summary>
            已删除
            </summary>
        </member>
        <member name="F:TCSoft.Models.PropertyTrackStatus.Modified">
            <summary>
            已修改
            </summary>
        </member>
        <member name="T:TCSoft.Mq.ActiveMQ.ActiveMQPoolConnectionManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Mq.ActiveMQ.ActiveMQPoolConnectionManager.#ctor(TCSoft.Mq.IMqConfigService,System.Int32)">
            <summary>
            
            </summary> 
        </member>
        <member name="M:TCSoft.Mq.ActiveMQ.ActiveMQPoolConnectionManager.GetPoolConnection(System.Guid,System.Int32@)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Mq.ActiveMQ.ActiveMQPoolConnectionManager.CleanPool">
            <summary>
            清理缓存池
            </summary>
        </member>
        <member name="P:TCSoft.Mq.ActiveMQ.ActiveMQPoolConnectionManager.MaxConnectCount">
            <summary>
            最大连接客户端
            </summary>
        </member>
        <member name="T:TCSoft.Mq.IMqConfigService">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Mq.IMqConfigService.GetMqConfig(System.Guid,System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Mq.IMqConfigService.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Mq.IMqConfigService.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Mq.IMqConfigService.Delete(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            
            </summary>
            <param name="idlist"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Mq.MqClientConfigInfo">
            <summary>
            消息通信配置信息(指定客户端消息配置信息)
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqClientConfigInfo.IpAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqClientConfigInfo.Port">
            <summary>
            tcp通信端口，支持openwrite协议
            </summary> 
        </member>
        <member name="P:TCSoft.Mq.MqClientConfigInfo.MqttPort">
            <summary>
            mqtt协议使用端口
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqClientConfigInfo.AccessUsername">
            <summary>
            消息队列访问用户
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqClientConfigInfo.AccessPassword">
            <summary>
            消息队列访问密码
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqClientConfigInfo.ClientId">
            <summary>
            客户ID(可以是门店ID等)
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqClientConfigInfo.MqInstanceId">
            <summary>
            MQ实例Id
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqClientConfigInfo.MqListenerId">
            <summary>
            MQ监听实例ID
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqClientConfigInfo.ExpiredTime">
            <summary>
            配置过期，过期之后需要重新判断配置是否有效
            </summary>
        </member>
        <member name="T:TCSoft.Mq.MqInstanceInfo">
            <summary>
            消息通信配置信息
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqInstanceInfo.IpAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqInstanceInfo.Port">
            <summary>
            tcp通信端口，支持openwrite协议
            </summary> 
        </member>
        <member name="P:TCSoft.Mq.MqInstanceInfo.MqttPort">
            <summary>
            mqtt协议使用端口
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqInstanceInfo.AccessUsername">
            <summary>
            消息队列访问用户
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqInstanceInfo.AccessPassword">
            <summary>
            消息队列访问密码
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqInstanceInfo.MqInstanceId">
            <summary>
            MQ实例Id
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqInstanceInfo.DelFalg">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Mq.MqInstanceInfo.ExpiredTime">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Network.TcpClientAsyncService">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.IO.ProcessLockHelper">
            <summary>
            进程锁ID
            </summary>
        </member>
        <member name="M:TCSoft.IO.ProcessLockHelper.GetProcessLockId">
            <summary>
            进程锁ID
            </summary> 
        </member>
        <member name="M:TCSoft.IO.ProcessLockHelper.GetProcessDirectoryName">
            <summary>
            获取进程目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.ProcessLockHelper.GetRunningMacAddress">
            <summary>
            获取进程运行mac地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.ProcessLockHelper.GetRunningComputerName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.ProcessLockHelper.GetIpAddresses">
            <summary>
            Ipv4获取允许获取多个
            </summary>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Redis.IRedisConfigService">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Redis.IRedisConfigService.Get(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Redis.IRedisConfigService.GetAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Redis.RedisBase">
            <summary>
             
            </summary>
        </member>
        <member name="M:TCSoft.Redis.RedisBase.Initialize(TCSoft.Redis.IRedisConfigService)">
            <summary>Initializes a static instance of the Nop factory.</summary> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.GetClientManager(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Redis.RedisBase.RemoveClientFromPool(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:TCSoft.Redis.RedisBase.RemovePattern(System.String)">
            <summary>
            
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:TCSoft.Redis.RedisBase.RemoveLike(ServiceStack.Redis.PooledRedisClientManager,System.String)">
            <summary>
            
            </summary>
            <param name="manager"></param>
            <param name="pattern"></param>
        </member>
        <member name="M:TCSoft.Redis.RedisBase.Item_Set``1(System.String,``0)">
            <summary> 
            设置单体 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="key"></param> 
            <param name="t"></param>  
            <returns></returns> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.Item_Set``1(System.String,``0,System.Int32)">
            <summary> 
            设置单体 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="key"></param> 
            <param name="t"></param> 
            <param name="timeout">分钟</param> 
            <returns></returns> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.Item_Get``1(System.String)">
            <summary> 
            获取单体 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="key"></param> 
            <returns></returns> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.Item_Remove(System.String)">
            <summary> 
            设置缓存过期 
            </summary> 
            <param name="key"></param>  
        </member>
        <member name="M:TCSoft.Redis.RedisBase.Item_SetExpire(System.String,System.Int32)">
            <summary> 
            设置缓存过期 
            </summary> 
            <param name="key"></param>
            <param name="timeout"></param> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.List_SetExpire(System.String,System.DateTime)">
            <summary> 
            设置缓存过期 
            </summary> 
            <param name="key"></param> 
            <param name="datetime"></param> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.Hash_Exist``1(System.String,System.String)">
            <summary> 
            判断某个数据是否已经被缓存 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="key"></param> 
            <param name="dataKey"></param> 
            <returns></returns> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.Hash_Set``1(System.String,System.String,``0,System.Nullable{System.Int32})">
            <summary> 
            存储数据到hash表 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="key"></param> 
            <param name="dataKey"></param> 
            <returns></returns> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.Hash_Remove(System.String,System.String)">
            <summary> 
            移除hash中的某值 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="key"></param> 
            <param name="dataKey"></param> 
            <returns></returns> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.Hash_Remove(System.String)">
            <summary> 
            移除整个hash 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="key"></param> 
            <param name="dataKey"></param> 
            <returns></returns> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.Hash_Get``1(System.String,System.String)">
            <summary> 
            从hash表获取数据 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="key"></param> 
            <param name="dataKey"></param> 
            <returns></returns> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.Hash_GetAll``1(System.String)">
            <summary> 
            获取整个hash的数据 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="key"></param> 
            <returns></returns> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.Hash_SetExpire(System.String,System.DateTime)">
            <summary> 
            设置缓存过期 
            </summary> 
            <param name="key"></param> 
            <param name="datetime"></param> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.Hash_GetCount(System.String)">
            <summary> 
            获取Hash集合数量 
            </summary> 
            <param name="key">Hashid</param> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.SortedSet_Add``1(System.String,``0,System.Double)">
            <summary> 
             添加数据到 SortedSet 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="key"></param> 
            <param name="t"></param> 
            <param name="score"></param> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.SortedSet_Remove``1(System.String,``0)">
            <summary> 
            移除数据从SortedSet 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="key"></param> 
            <param name="t"></param> 
            <returns></returns> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.SortedSet_Trim(System.String,System.Int32)">
            <summary> 
            修剪SortedSet 
            </summary> 
            <param name="key"></param> 
            <param name="size">保留的条数</param> 
            <returns></returns> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.SortedSet_Count(System.String)">
            <summary> 
            获取SortedSet的长度 
            </summary> 
            <param name="key"></param> 
            <returns></returns> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.SortedSet_GetList``1(System.String,System.Int32,System.Int32)">
            <summary> 
            获取SortedSet的分页数据 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="key"></param> 
            <param name="pageIndex"></param> 
            <param name="pageSize"></param> 
            <returns></returns> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.SortedSet_GetListALL``1(System.String)">
            <summary> 
            获取SortedSet的全部数据 
            </summary> 
            <typeparam name="T"></typeparam> 
            <param name="key"></param> 
            <param name="pageIndex"></param> 
            <param name="pageSize"></param> 
            <returns></returns> 
        </member>
        <member name="M:TCSoft.Redis.RedisBase.SortedSet_SetExpire(System.String,System.DateTime)">
            <summary> 
            设置缓存过期 
            </summary> 
            <param name="key"></param> 
            <param name="datetime"></param> 
        </member>
        <member name="P:TCSoft.Redis.RedisBase.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Redis.RedisConfig">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Redis.RedisConfig.ConfigId">
            <summary>
            配置ID
            </summary>
        </member>
        <member name="P:TCSoft.Redis.RedisConfig.ReadWriteHosts">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Redis.RedisConfig.ReadOnlyHosts">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Redis.RedisConfig.ExpiredTime">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Security.AccessTokenHelper">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Security.AccessTokenHelper.Key">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Security.AccessTokenHelper.Generate(System.Guid,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            生产token
            </summary>
            <param name="id"></param>
            <param name="openUserId"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Security.AccessTokenHelper.Match(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="accessToken"></param> 
            <param name="expired">默认有效事件2个小时</param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Security.AccessToken">
            <summary>
            访问token
            </summary>
        </member>
        <member name="P:TCSoft.Security.AccessToken.CompanyId">
            <summary>
            商家ID
            </summary>
        </member>
        <member name="P:TCSoft.Security.AccessToken.OpenUserId">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Security.AccessToken.Args">
            <summary>
            其它参数
            </summary>
        </member>
        <member name="T:TCSoft.Security.AccessTokenResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Security.AccessTokenResult.IsMatch">
            <summary>
            是否匹配成功
            </summary>
        </member>
        <member name="T:TCSoft.Security.Cryptography.CRCUtils">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Security.Cryptography.CRCUtils.crctab">
            <summary>
            CRCTAB 表
            </summary>
        </member>
        <member name="M:TCSoft.Security.Cryptography.CRCUtils.Algorithm(System.UInt16,System.Byte)">
            <summary>
            CRC校验算法
            </summary>
            <param name="crc">CRC</param>
            <param name="cp">发送的数据序列</param>
            <returns>新CRC</returns>
        </member>
        <member name="M:TCSoft.Security.Cryptography.CRCUtils.AddCRC(System.Byte[]@,System.Int32)">
            <summary>
            添加CRC校验字
            </summary>
            <param name="bufin">信息串</param>
            <param name="n">不包括校验字的串总长度</param>
        </member>
        <member name="M:TCSoft.Security.Cryptography.CRCUtils.AddCRC(System.Byte[]@)">
            <summary>
            添加CRC校验字(最后后的两个字节为校验值)
            </summary>
            <param name="bufin">信息串</param> 
        </member>
        <member name="M:TCSoft.Security.Cryptography.CRCUtils.CheckCRC(System.Byte[]@,System.Int32)">
            <summary>
            CRC数据验证
            </summary>
            <param name="bufout">信息串</param>
            <param name="count">接收数据总长度</param>
            <returns>true:校验成功,false:校验失败</returns>
        </member>
        <member name="M:TCSoft.Security.Cryptography.CRCUtils.CheckCRC(System.Byte[]@)">
            <summary>
            CRC数据验证
            </summary>
            <param name="bufout">信息串(数组最后两个字节填充的是校验数据)</param>
            <returns>true:校验成功,false:校验失败</returns>
        </member>
        <member name="M:TCSoft.Security.Tencent.Cryptography.AES_decrypt(System.String,System.String,System.String@)">
            <summary>
            解密方法
            </summary>
            <param name="Input">密文</param>
            <param name="EncodingAESKey"></param>
            <returns></returns>
            
        </member>
        <member name="M:TCSoft.Security.Tencent.Cryptography.chr(System.Int32)">
            将数字转化成ASCII码对应的字符，用于对明文进行补码
            
            @param a 需要转化的数字
            @return 转化得到的字符
        </member>
        <member name="M:TCSoft.Security.Tencent.WXBizMsgCrypt.#ctor(System.String,System.String,System.String)">
            <summary> 
            构造函数
            </summary>
            <param name="sToken">公众平台上，开发者设置的Token</param>
            <param name="sEncodingAESKey">公众平台上，开发者设置的EncodingAESKey</param>
            <param name="sAppID">公众帐号的appid</param>
        </member>
        <member name="M:TCSoft.Security.Tencent.WXBizMsgCrypt.DecryptMsg(System.String,System.String,System.String,System.String,System.String@)">
            <summary>
             检验消息的真实性，并且获取解密后的明文
            </summary>
            <param name="sMsgSignature">签名串，对应URL参数的msg_signature</param>
            <param name="sTimeStamp">时间戳，对应URL参数的timestamp</param>
            <param name="sNonce">随机串，对应URL参数的nonce</param>
            <param name="sPostData">密文，对应POST请求的数据</param>
            <param name="sMsg">解密后的原文，当return返回0时有效</param>
            <returns>成功0，失败返回对应的错误码</returns>
        </member>
        <member name="M:TCSoft.Security.Tencent.WXBizMsgCrypt.VerifySignature(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sToken"></param>
            <param name="sMsgEncrypt">签名串，对应URL参数的msg_signature</param>
            <param name="sTimeStamp">时间戳，对应URL参数的timestamp</param>
            <param name="sNonce">随机串，对应URL参数的nonce</param>
            <param name="sSigture"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Security.Tencent.WXBizMsgCrypt.GenarateSinature(System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="sToken"></param> 
            <param name="sMsgEncrypt">签名串，对应URL参数的msg_signature</param>
            <param name="sTimeStamp">时间戳，对应URL参数的timestamp</param>
            <param name="sNonce">随机串，对应URL参数的nonce</param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.TcSoftVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.TcSoftVersion.CurrentVersion">
            <summary>
            Gets or sets the store version
            </summary>
        </member>
        <member name="T:TCSoft.Security.Cryptography.RSACryption">
            <summary> 
            RSA加密解密及RSA签名和验证
            </summary> 
        </member>
        <member name="M:TCSoft.Security.Cryptography.RSACryption.RSAKey(System.String@,System.String@)">
            <summary>
            RSA 的密钥产生 产生私钥 和公钥 
            </summary>
            <param name="xmlKeys"></param>
            <param name="xmlPublicKey"></param>
        </member>
        <member name="M:TCSoft.Security.Cryptography.RSACryption.RSAEncrypt(System.String,System.String)">
            <summary>
            RSA字符串加密
            </summary>
            <param name="xmlPublicKey">加密密钥</param>
            <param name="m_strEncryptString">待加密字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:TCSoft.Security.Cryptography.RSACryption.RSAEncrypt(System.String,System.Byte[])">
            <summary>
            RSA数组加密
            </summary>
            <param name="xmlPublicKey">密钥</param>
            <param name="ints">待加密数据</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="T:TCSoft.Security.Cryptography.StringDECHelper">
            <summary>
            加解密
            </summary>
        </member>
        <member name="F:TCSoft.Security.Cryptography.StringDECHelper.KEY_64">
            <summary> 
            KEY 固定
            </summary> 
        </member>
        <member name="M:TCSoft.Security.Cryptography.StringDECHelper.Encrypt(System.String)">
            <summary>
            字符串加密（自带密钥）
            </summary>
            <param name="pToEncrypt">待加密字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:TCSoft.Security.Cryptography.StringDECHelper.Encrypt(System.String,System.String)">
            <summary>
            字符串加密
            </summary>
            <param name="pToEncrypt">待加密字符串</param>
            <param name="key">密钥（8位字符串）</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:TCSoft.Security.Cryptography.StringDECHelper.Decrypt(System.String)">
            <summary>
            字符串解密（自带密钥）
            </summary>
            <param name="pToDecrypt">字符串</param>
            <returns>解密后的字符串（解密失败返回“”）</returns>
        </member>
        <member name="M:TCSoft.Security.Cryptography.StringDECHelper.Decrypt(System.String,System.String)">
            <summary>
            字符串解密
            </summary>
            <param name="pToDecrypt">字符串</param>
            <param name="key">密钥（8位字符串）</param>
            <returns>解密后的字符串（解密失败返回“”）</returns>
        </member>
        <member name="M:TCSoft.Security.Cryptography.StringDECHelper.Md5(System.String)">
            <summary>
            MD5函数
            </summary>
            <param name="str">原始字符串</param>
            <returns>MD5结果</returns>
        </member>
        <member name="M:TCSoft.Security.Cryptography.StringDECHelper.Hash(System.String)">
            <summary>
            哈希字符串转换格式
            </summary>
            <param name="toHash">要转换的hash字符串</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="T:TCSoft.Utitlies.AppUnitity">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.AppUnitity.Restart(System.String,System.Boolean)">
            <summary>
            重新应用
            </summary> 
            <param name="exeFileNameOrWindowServiceName">exe程序文件名或window服务名称</param>
            <param name="isWindowService">是否windows服务</param>
        </member>
        <member name="M:TCSoft.Utitlies.AppUnitity.KillOrStop(System.String,System.Boolean,System.Boolean)">
            <summary>
            结束应用保证自动升级成功
            </summary> 
            <param name="exeFileNameOrWindowServiceName">exe程序文件名或window服务名称</param>
            <param name="isWindowService">是否windows服务</param>
            <param name="isCurrentProcess">是否结束当前进程</param>
        </member>
        <member name="M:TCSoft.Utitlies.AppUnitity.RunAutoUpdaterProcess(System.String,System.Boolean)">
            <summary>
            运行自动升级助手
            </summary>
            <param name="processExeName">可执行文件名称(相对当前路径)</param>
            <param name="isBackground"></param>
        </member>
        <member name="M:TCSoft.Utitlies.AppUnitity.RestartApplication(System.String)">
            <summary>
            启动exe程序
            </summary> 
        </member>
        <member name="M:TCSoft.Utitlies.AppUnitity.RestartWindowService(System.String)">
            <summary>
            启动windows服务
            </summary> 
        </member>
        <member name="M:TCSoft.Utitlies.AppUnitity.StopWindowService(System.String)">
            <summary>
            状态window服务
            </summary>
            <param name="exeFileNameOrWindowServiceName"></param>
        </member>
        <member name="T:TCSoft.Utitlies.DigitToMoneyText">
            <summary>
            将小写数字转换为 一般中文大写数字 和 人民币大写数字
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.DigitToMoneyText.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.DigitToMoneyText.ConvertMoney(System.String,System.Boolean)">
            <summary>
            将小写数字转换为 一般中文大写数字 和 人民币大写数字
            </summary>
            <param name="strDigit">待转换数字字符串</param>
            <param name="bToRMB">是否转换成人民币</param>
            <returns>转换成的大写字符串</returns>
        </member>
        <member name="M:TCSoft.Utitlies.DigitToMoneyText.Convert(System.String,System.Boolean)">
            <summary>
            将小写数字转换为 一般中文大写数字 和 人民币大写数字
            </summary>
            <param name="strDigit">待转换数字字符串</param>
            <param name="bToRMB">是否转换成人民币</param>
            <returns>转换成的大写字符串</returns>
        </member>
        <member name="M:TCSoft.Utitlies.DigitToMoneyText.ConvertNumber(System.Text.StringBuilder@,System.String@,System.Boolean)">
            <summary>
            转换数字
            </summary>
            <param name="strResult"></param>
            <param name="strDigit"></param>
            <param name="bToRMB"></param>
        </member>
        <member name="M:TCSoft.Utitlies.DigitToMoneyText.CheckDigit(System.String@,System.Boolean)">
            <summary>
            检查输入数字有效性
            </summary>
            <param name="strDigit"></param>
            <param name="bToRMB"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.DigitToMoneyText.ExtractSign(System.Text.StringBuilder@,System.String@,System.Boolean)">
            <summary>
            提取输入字符串的符号
            </summary>
            <param name="strResult"></param>
            <param name="strDigit"></param>
            <param name="bToRMB"></param>
        </member>
        <member name="M:TCSoft.Utitlies.DigitToMoneyText.ConvertIntegral(System.String,System.Boolean)">
            <summary>
            转换整数部分
            </summary>
            <param name="strIntegral"></param>
            <param name="bToRMB"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.DigitToMoneyText.ConvertFractional(System.String,System.Boolean)">
            <summary>
            转换小数部分
            </summary>
            <param name="strFractional"></param>
            <param name="bToRMB"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Utitlies.ExportEngine`1">
            <summary>
            数据导出引擎，支持智能导出，自动绑定数据列，实现一行代码即可导出，支持样式设置。
            </summary>
            <typeparam name="T">数据实例的类型</typeparam>
            <remarks>
            <para>此类专用于数据导出。 它可以将数据对象导出到Excel中。提供如下功能支持：</para>
            <ul>
            <li>广泛支持多种数据源，支持智能导出，自动绑定数据列，实现一行代码即可导出</li>
            <li>支持手动指定数据列</li>
            <li>支持自定义处理程序，让数据导出更智能</li>
            <li>支持文档标题、文档备注</li>
            <li>支持自定义设置Excel表格的样式</li>
            <li>支持.NET Framework 2.0 及其以上</li>
            <li>支持导出为Excel、网页</li>
            </ul>
            <br />
            <para>它广泛支持多种数据源，<strong>您可以绑定任意集合</strong>：</para>
            <ul>
            <li>DataSet</li>
            <li>DataTable</li>
            <li>List</li>
            <li>List&lt;T&gt;（T可以是任何自定义实例类）</li>
            <li>Collection</li>
            <li>Collection&lt;T&gt;（T可以是任何自定义实例类）</li>
            <li>……任何实现了IListSource、IEnumerable 或 IDataSource中任意一个接口的对象！</li>
            <li>简言之，<strong>任何可用绑定到GridView的数据源都可以直接绑定导出</strong>！</li>
            </ul>
            <para>
            详细使用说明请见Demo程序：<a href="http://udnz.com/Works/Demo/ExportEngine/" target="_blank">http://udnz.com/Works/Demo/ExportEngine/</a>
            </para>
            </remarks> 
        </member>
        <member name="M:TCSoft.Utitlies.ExportEngine`1.AddColumns(System.String,System.String,TCSoft.Utitlies.DataFormatter{`0})">
            <summary>
            添加要导出的要导出的数据列
            </summary>
            <param name="dataField">获取或设置要绑定的数据字段的名称。可以是对象属性、字段、DataRow名称等，使用方法同 BoundField.DataField。</param>
            <param name="headerText"> 获取或设置显示在数据列标头中的文本，使用方法同 BoundField.HeaderText。</param>
            <param name="dataFormatter">获取或设置数据处理程序。用于绑定每行时定制化输出该列的文本。导出自动绑定列时无效。</param>
        </member>
        <member name="M:TCSoft.Utitlies.ExportEngine`1.AddColumns(System.String,System.String,System.String,TCSoft.Utitlies.DataFormatter{`0},System.Boolean,System.Boolean)">
            <summary>
            添加要导出的要导出的数据列
            </summary>
            <param name="dataField">获取或设置要绑定的数据字段的名称。可以是对象属性、字段、DataRow名称等，使用方法同 BoundField.DataField。</param>
            <param name="headerText"> 获取或设置显示在数据列标头中的文本，使用方法同 BoundField.HeaderText。</param>
            <param name="dataFormatString">获取或设置字符串，该字符串指定字段值的显示格式。默认值为空字符串 ("")，表示尚无特殊格式设置应用于该字段值。</param>
            <param name="dataFormatter">获取或设置数据处理程序。用于绑定每行时定制化输出该列的文本。导出自动绑定列时无效。</param>
            <param name="mHtmlEncode"> 获取或设置一个值，该值指示在显示字段值之前，是否对这些字段值进行 HTML 编码。默认为 true。</param>
            <param name="mHtmlEncodeFormatString">获取或设置一个值，该值指示格式化的文本在显示时是否应经过 HTML 编码。默认为 true。</param>
        </member>
        <!-- 对于成员“M:TCSoft.Utitlies.ExportEngine`1.#ctor”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:TCSoft.Utitlies.ExportEngine`1.#ctor(System.Collections.Generic.List{TCSoft.Utitlies.DataColumn{`0}})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:TCSoft.Utitlies.ExportEngine`1.#ctor(System.Collections.Generic.List{TCSoft.Utitlies.DataColumn{`0}},TCSoft.Utitlies.Options)”忽略有格式错误的 XML 注释 -->
        <member name="M:TCSoft.Utitlies.ExportEngine`1.ExportToExcel(System.Object)">
            <summary>
            执行导出任务
            </summary>
            <param name="data">要导出的数据</param>
        </member>
        <member name="M:TCSoft.Utitlies.ExportEngine`1.ExportToBytes(System.Web.UI.WebControls.GridView)">
            <summary>
            导出GridView中的数据到Excel
            </summary>
            <param name="gvw"></param>
        </member>
        <member name="M:TCSoft.Utitlies.ExportEngine`1.SetStype(System.Web.UI.WebControls.GridView)">
            <summary>
            设置样式
            </summary>
            <param name="gvw"></param>
        </member>
        <member name="M:TCSoft.Utitlies.ExportEngine`1.InitFileName">
            <summary>
            初始化响应头信息，并返回文件名
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.ExportEngine`1.ExportToExcel(System.Web.UI.WebControls.GridView)">
            <summary>
            导出GridView中的数据到Excel
            </summary>
            <param name="gvw"></param>
        </member>
        <member name="P:TCSoft.Utitlies.ExportEngine`1.Options">
            <summary>
            导出参数。可设置文件名、标题文字、表格样式、备注信息等
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.ExportEngine`1.Columns">
            <summary>
            要导出的数据列。不指定则自动绑定数据源的所有列
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.ExportEngine`1.Charset">
            <summary>
            获取或设置输出流的 HTTP 字符集。具体说明同 <see cref="P:System.Web.HttpResponse.Charset"/>。此处默认为 UTF-8。
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.ExportEngine`1.ContentEncoding">
            <summary>
            获取或设置输出流的 HTTP 字符集。具体说明同 <see cref="P:System.Web.HttpResponse.ContentEncoding"/>，此处默认为 Encoding.UTF8。
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.ExportEngine`1.FileType">
            <summary>
            获取或设置导出文件的类型。默认为Excel 97-2003
            </summary>
        </member>
        <member name="T:TCSoft.Utitlies.DataFormatter`1">
            <summary>
            数据处理程序。用于绑定每行时定制化输出该列的文本
            </summary>
            <typeparam name="T">各行的数据类型</typeparam>
            <param name="columnData">当前行的数据</param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Utitlies.DataColumn`1">
            <summary>
            要导出的数据列信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:TCSoft.Utitlies.DataColumn`1.DataField">
            <summary>
            获取或设置要绑定的数据字段的名称。可以是对象属性、字段、DataRow名称等，使用方法同 BoundField.DataField。
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.DataColumn`1.HeaderText">
            <summary>
            获取或设置显示在数据列标头中的文本，使用方法同 BoundField.HeaderText。
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.DataColumn`1.DataFormater">
            <summary>
            获取或设置数据处理程序。用于绑定每行时定制化输出该列的文本。导出自动绑定列时无效。
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.DataColumn`1.DataFormatString">
            <summary>
            获取或设置字符串，该字符串指定字段值的显示格式。默认值为空字符串 ("")，表示尚无特殊格式设置应用于该字段值。<see cref="!:"/>为null时有效。
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.DataColumn`1.HtmlEncode">
            <summary>
            获取或设置一个值，该值指示在显示字段值之前，是否对这些字段值进行 HTML 编码。默认为 true。
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.DataColumn`1.HtmlEncodeFormatString">
            <summary>
            获取或设置一个值，该值指示格式化的文本在显示时是否应经过 HTML 编码。默认为 true。
            </summary>
        </member>
        <member name="T:TCSoft.Utitlies.Options">
            <summary>
            导出时使用的参数设置
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.FileName">
            <summary>
            导出文件名，不设置则系统自动生成
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.InfoHtml">
            <summary>
            导出文件备注信息，将跟随在导出表格之后，支持Html代码
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.TitleInfoHtml">
            <summary>
            导出二级标题Html代码
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.TitleText">
            <summary>
            导出数据表格的标题文字
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.TitleIsBold">
            <summary>
            标题文字是否加粗，默认加粗
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.TitleIsItalic">
            <summary>
            标题文字是否斜体，默认不使用斜体
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.TitleFontName">
            <summary>
            标题文字使用的字体，默认为微软雅黑
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.TitleFontSize">
            <summary>
            标题文字大小，默认为 18
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.TitleForeColor">
            <summary>
            标题文字颜色，默认黑色
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.TitleBackColor">
            <summary>
            标题文字背景色，默认不设置
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.TitleHorizontalAlign">
            <summary>
            标题文字横向位置，默认居中
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.TitleHeight">
            <summary>
            标题高度，默认 50 像素
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.HeaderIsBold">
            <summary>
            列标题是否加粗，默认加粗
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.HeaderIsItalic">
            <summary>
            列标题是否斜体，默认不使用斜体
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.HeaderFontName">
            <summary>
            列标题默认字体，默认为 Verdana
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.HeaderFontSize">
            <summary>
            列标题文字大小，默认为 10
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.HeaderStyle">
            <summary>
            列标题样式。仅Wrap/BackColor/ForeColor/HorizontalAlign/Height有效。
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.RowFontName">
            <summary>
            数据行字体，默认为 Verdana
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.RowFontSize">
            <summary>
            数据行文字大小，默认为 9
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.RowStyle">
            <summary>
            数据行文字样式。仅Wrap/BackColor/ForeColor/HorizontalAlign/Height有效。
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.AlternatingRowFontName">
            <summary>
            交替行字体，默认为 Verdana
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.AlternatingRowFontSize">
            <summary>
            交替行文字大小，默认为 9
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.Options.AlternatingRowStyle">
            <summary>
            交替行文字样式。仅Wrap/BackColor/ForeColor/HorizontalAlign/Height有效。
            </summary>
        </member>
        <member name="T:TCSoft.Utitlies.FileType">
            <summary>
            导出文件类型
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.FileType.Excel">
            <summary>
            Excel 97-2003
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.FileType.Htm">
            <summary>
            Htm 网页
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.FileType.Html">
            <summary>
            Html 网页
            </summary>
        </member>
        <member name="T:TCSoft.Expressions.PredicateBuilderUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Expressions.PredicateBuilderUtility.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="merge"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Expressions.PredicateBuilderUtility.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Expressions.PredicateBuilderUtility.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Expressions.ParameterRebinder">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Expressions.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:TCSoft.Expressions.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="map"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.IO.FileSystemSettings">
            <summary>
            文件信息配置信息
            </summary>
        </member>
        <member name="P:TCSoft.IO.FileSystemSettings.DirectoryName">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.IO.FileSystemStorageProvider">
            <summary>
            文件存储信息提供者实现
            </summary>
        </member>
        <member name="T:TCSoft.IO.IStorageProvider">
            <summary>
            存储信息提供者
            </summary>
        </member>
        <member name="M:TCSoft.IO.IStorageProvider.GetPublicUrl(System.String)">
            <summary>
            获取发布URL
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageProvider.GetStoragePath(System.String)">
            <summary>
            获取物理存储路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageProvider.GetFile(System.String)">
            <summary>
            获取存储文件信息
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageProvider.ListFiles(System.String)">
            <summary>
            获取文件列表
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageProvider.ListFolders(System.String)">
            <summary>
            获取文件目录
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageProvider.CreateFolder(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:TCSoft.IO.IStorageProvider.DeleteFolder(System.String)">
            <summary>
            删除文件夹
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:TCSoft.IO.IStorageProvider.RenameFolder(System.String,System.String)">
            <summary>
            重命名文件夹
            </summary>
            <param name="path"></param>
            <param name="newPath"></param>
        </member>
        <member name="M:TCSoft.IO.IStorageProvider.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:TCSoft.IO.IStorageProvider.RenameFile(System.String,System.String)">
            <summary>
            重命名文件
            </summary>
            <param name="path"></param>
            <param name="newPath"></param>
        </member>
        <member name="M:TCSoft.IO.IStorageProvider.CreateFile(System.String)">
            <summary>
            创建文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageProvider.Exists(System.String)">
            <summary>
            文件是否存在
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.FileSystemStorageProvider.#ctor(TCSoft.IO.FileSystemSettings)">
            <summary>
            
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:TCSoft.IO.FileSystemStorageProvider.GetPublicUrl(System.String)">
            <summary>
            获取发布URL
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.FileSystemStorageProvider.GetStoragePath(System.String)">
            <summary>
            获取物理存储路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.FileSystemStorageProvider.GetFile(System.String)">
            <summary>
            获取存储文件信息
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.FileSystemStorageProvider.Exists(System.String)">
            <summary>
            文件是否存在
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.FileSystemStorageProvider.ListFiles(System.String)">
            <summary>
            获取文件列表
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.FileSystemStorageProvider.ListFolders(System.String)">
            <summary>
            获取文件目录
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.FileSystemStorageProvider.CreateFolder(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:TCSoft.IO.FileSystemStorageProvider.DeleteFolder(System.String)">
            <summary>
            删除文件夹
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:TCSoft.IO.FileSystemStorageProvider.RenameFolder(System.String,System.String)">
            <summary>
            重命名文件夹
            </summary>
            <param name="path"></param>
            <param name="newPath"></param>
        </member>
        <member name="M:TCSoft.IO.FileSystemStorageProvider.CreateFile(System.String)">
            <summary>
            创建文件
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.FileSystemStorageProvider.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:TCSoft.IO.FileSystemStorageProvider.RenameFile(System.String,System.String)">
            <summary>
            重命名文件
            </summary>
            <param name="path"></param>
            <param name="newPath"></param>
        </member>
        <member name="T:TCSoft.IO.IStorageFile">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="M:TCSoft.IO.IStorageFile.GetPath">
            <summary>
            文件路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageFile.GetName">
            <summary>
            文件名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageFile.GetSize">
            <summary>
            文件大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageFile.GetLastUpdated">
            <summary>
            最近修改时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageFile.GetFileType">
            <summary>
            文件类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageFile.OpenRead">
            <summary>
            Creates a stream for reading from the file.
            </summary>
        </member>
        <member name="M:TCSoft.IO.IStorageFile.OpenWrite">
            <summary>
            Creates a stream for writing to the file.
            </summary>
        </member>
        <member name="T:TCSoft.IO.IStorageFolder">
            <summary>
            文件夹信息
            </summary>
        </member>
        <member name="M:TCSoft.IO.IStorageFolder.GetPath">
            <summary>
            路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageFolder.GetName">
            <summary>
            文件夹名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageFolder.GetSize">
            <summary>
            非隐藏文件数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageFolder.GetLastUpdated">
            <summary>
            最近修改时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.IO.IStorageFolder.GetParent">
            <summary>
            上级文件夹信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Logging.ConsoleLoger">
            <summary>
            控制台日志
            </summary>
        </member>
        <member name="T:TCSoft.Logging.LoggerBase">
            <summary>
            日志基类
            </summary>
        </member>
        <member name="T:TCSoft.Logging.ILogger">
            <summary>
            日志基本接口
            </summary>
        </member>
        <member name="M:TCSoft.Logging.ILogger.IsEnabled(TCSoft.Logging.LogLevel)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Logging.ILogger.Log(TCSoft.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            summary
            </summary>
            <param name="level"></param>
            <param name="exception"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:TCSoft.Logging.ILogger.Log(TCSoft.Logging.LogLevel,System.String,System.Exception)">
            <summary>
            summary
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:TCSoft.Logging.ILogger.Log(System.String,System.Exception)">
            <summary>
            错误提示信息记录
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:TCSoft.Logging.ILogger.Log(TCSoft.Logging.LogLevel,System.String)">
            <summary>
            日志记录
            </summary>
            <param name="level"></param>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.ILogger.Log(System.String)">
            <summary>
            提示信息记录
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggerBase.IsEnabled(TCSoft.Logging.LogLevel)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Logging.LoggerBase.Log(TCSoft.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            summary
            </summary>
            <param name="level"></param>
            <param name="exception"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggerBase.Log(TCSoft.Logging.LogLevel,System.String,System.Exception)">
            <summary>
            summary
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggerBase.Log(System.String,System.Exception)">
            <summary>
            信息记录
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggerBase.Log(TCSoft.Logging.LogLevel,System.String)">
            <summary>
            日志记录
            </summary>
            <param name="level"></param>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggerBase.Log(System.String)">
            <summary>
            提示信息记录
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.ConsoleLoger.IsEnabled(TCSoft.Logging.LogLevel)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Logging.ConsoleLoger.Log(TCSoft.Logging.LogLevel,System.String,System.Exception)">
            <summary>
            summary
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:TCSoft.Logging.LoggerFactory">
            <summary>
            日志工厂
            </summary>
        </member>
        <member name="M:TCSoft.Logging.LoggerFactory.GetLog(TCSoft.Logging.LoggerType)">
            <summary>
            
            </summary>
            <param name="loggerType"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Logging.LoggerFactory.GetLog">
            <summary>
            根据AppSettings["LoggerType"]配置获取日志类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Logging.LoggerFactory.DeleteLogs(System.Int32)">
            <summary>
            删除过期日志文件
            </summary>
            <param name="keepDays">保留天数</param>
        </member>
        <member name="M:TCSoft.Logging.LoggerFactory.DeleteADirectory(System.String)">
            <summary>
            解决删除目录提示：System.IO.IOException: 目录不是空的。
            删除一个目录，先遍历删除其下所有文件和目录（递归）
            </summary>
            <param name="strPath">绝对路径</param>
            <returns>是否已经删除</returns>
        </member>
        <member name="P:TCSoft.Logging.LoggerFactory.CurrentLoggerType">
            <summary>
            获取当前AppSettings["LoggerType"]配置的日志类型
            </summary>
        </member>
        <member name="T:TCSoft.Logging.LoggerType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:TCSoft.Logging.LoggerType.NullLog">
            <summary>
            空日志
            </summary>
        </member>
        <member name="F:TCSoft.Logging.LoggerType.ConsoleLog">
            <summary>
            控制台日志
            </summary>
        </member>
        <member name="F:TCSoft.Logging.LoggerType.Log4Net">
            <summary>
            Log4Net日志
            </summary>
        </member>
        <member name="F:TCSoft.Logging.LoggerType.NLog">
            <summary>
            NLog日志
            </summary>
        </member>
        <member name="T:TCSoft.Logging.LoggingExtensions">
            <summary>
            日志扩展方法
            </summary>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Debug(TCSoft.Logging.ILogger,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Information(TCSoft.Logging.ILogger,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Warning(TCSoft.Logging.ILogger,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Error(TCSoft.Logging.ILogger,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Trace(TCSoft.Logging.ILogger,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Fatal(TCSoft.Logging.ILogger,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Debug(TCSoft.Logging.ILogger,System.Exception,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Information(TCSoft.Logging.ILogger,System.Exception,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Warning(TCSoft.Logging.ILogger,System.Exception,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Error(TCSoft.Logging.ILogger,System.Exception,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Fatal(TCSoft.Logging.ILogger,System.Exception,System.String)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="message"></param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Debug(TCSoft.Logging.ILogger,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="format">string.Format(format,arg) 中的第一个参数</param>
            <param name="args">string.Format(format,args) 中的第二个参数</param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Information(TCSoft.Logging.ILogger,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="format">string.Format(format,arg) 中的第一个参数</param>
            <param name="args">string.Format(format,args) 中的第二个参数</param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Warning(TCSoft.Logging.ILogger,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="format">string.Format(format,arg) 中的第一个参数</param>
            <param name="args">string.Format(format,args) 中的第二个参数</param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Error(TCSoft.Logging.ILogger,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="format">string.Format(format,arg) 中的第一个参数</param>
            <param name="args">string.Format(format,args) 中的第二个参数</param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Fatal(TCSoft.Logging.ILogger,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="format">string.Format(format,arg) 中的第一个参数</param>
            <param name="args">string.Format(format,args) 中的第二个参数</param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Debug(TCSoft.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="format">string.Format(format,arg) 中的第一个参数</param>
            <param name="args">string.Format(format,args) 中的第二个参数</param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Information(TCSoft.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="format">string.Format(format,arg) 中的第一个参数</param>
            <param name="args">string.Format(format,args) 中的第二个参数</param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Warning(TCSoft.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="format">string.Format(format,arg) 中的第一个参数</param>
            <param name="args">string.Format(format,args) 中的第二个参数</param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Error(TCSoft.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="format">string.Format(format,arg) 中的第一个参数</param>
            <param name="args">string.Format(format,args) 中的第二个参数</param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Error(TCSoft.Logging.ILogger,System.Exception,System.Reflection.MethodBase)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="methodBase"></param> 
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.Fatal(TCSoft.Logging.ILogger,System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="exception"></param>
            <param name="format">string.Format(format,arg) 中的第一个参数</param>
            <param name="args">string.Format(format,args) 中的第二个参数</param>
        </member>
        <member name="M:TCSoft.Logging.LoggingExtensions.FilteredLog(TCSoft.Logging.ILogger,TCSoft.Logging.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="level"></param>
            <param name="exception"></param>
            <param name="format">string.Format(format,arg) 中的第一个参数</param>
            <param name="objects">string.Format(format,args) 中的第二个参数</param>
        </member>
        <member name="T:TCSoft.Logging.LogLevel">
            <summary>
            日志等级 Fatal > Error > Warning> Information > Debug > Trace
            </summary>
        </member>
        <member name="F:TCSoft.Logging.LogLevel.Trace">
            <summary>
            跟踪信息
            </summary>
        </member>
        <member name="F:TCSoft.Logging.LogLevel.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:TCSoft.Logging.LogLevel.Information">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:TCSoft.Logging.LogLevel.Warning">
            <summary>
            警报
            </summary>
        </member>
        <member name="F:TCSoft.Logging.LogLevel.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:TCSoft.Logging.LogLevel.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="T:TCSoft.Logging.NLoger">
            <summary>
            NLog封装实现
            </summary>
        </member>
        <member name="M:TCSoft.Logging.NLoger.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Logging.NLoger.IsEnabled(TCSoft.Logging.LogLevel)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Logging.NLoger.Log(TCSoft.Logging.LogLevel,System.String,System.Exception)">
            <summary>
            summary
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="P:TCSoft.Network.CallBackState.Client">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Network.CallBackState.NetworkStream">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Network.DataEventArgs`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:TCSoft.Network.DataEventArgs`1.Data">
            <summary>
            事件携带的数据
            </summary>
        </member>
        <member name="P:TCSoft.Network.DataEventArgs`1.Obj">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Network.HttpListenContext">
            <summary>
            HTTP监听上下文
            </summary>
        </member>
        <member name="M:TCSoft.Network.HttpListenContext.#ctor(System.String)">
            <summary>
            HTTP监听上下文
            </summary>
            <param name="recContent"></param>
        </member>
        <member name="M:TCSoft.Network.HttpListenContext.#ctor(System.Byte[],System.Text.Encoding)">
            <summary>
            
            </summary>
            <param name="receBuf"></param>
            <param name="encoding"></param>
        </member>
        <member name="P:TCSoft.Network.HttpListenContext.IsValidContext">
            <summary>
            是否为有效上下文
            </summary>
        </member>
        <member name="P:TCSoft.Network.HttpListenContext.Path">
            <summary>
            当前请求的虚拟路径
            </summary>
        </member>
        <member name="P:TCSoft.Network.HttpListenContext.Protocol">
            <summary>
            使用协议
            </summary>
        </member>
        <member name="P:TCSoft.Network.HttpListenContext.ContentLength">
            <summary>
            指定客户端发送的内容长度（以字节计）。
            </summary>
            <returns>客户端发送的内容的长度（以字节为单位）。</returns>
        </member>
        <member name="P:TCSoft.Network.HttpListenContext.ContentBody">
            <summary>
            主体内容
            </summary>
        </member>
        <member name="P:TCSoft.Network.HttpListenContext.ContentType">
            <summary>
             获取或设置传入请求的 MIME 内容类型。
            </summary>
            <returns>表示传入请求的 MIME 内容类型的字符串，例如，“text/html”</returns>
        </member>
        <member name="P:TCSoft.Network.HttpListenContext.QueryString">
            <summary>
             获取 HTTP 查询字符串变量集合。
            </summary>
        </member>
        <member name="P:TCSoft.Network.HttpListenContext.Forms">
            <summary>
            获取窗体变量集合。 
            </summary>
        </member>
        <member name="P:TCSoft.Network.HttpListenContext.Headers">
            <summary>
            获取 HTTP 头集合
            </summary>
        </member>
        <member name="P:TCSoft.Network.HttpListenContext.HttpMethod">
            <summary>
            获取客户端使用的 HTTP 数据传输方法（如 GET、POST 或 HEAD）
            </summary>
        </member>
        <member name="T:TCSoft.Network.HttpListenServiceBase">
            <summary>
              使用TCP实现HTTP监听服务
              http监听一旦数据处理完，就会关掉连接，下次有数据来就会新开一个连接，是短连接。TCP是长连接。这是httplisten与tcplisten的不同。条件允许时可以合并到一起
            </summary>
        </member>
        <member name="T:TCSoft.Services.ServiceBase">
            <summary>
            
            </summary>
            <typeparam name="TEventArgs"></typeparam>
        </member>
        <member name="T:TCSoft.Services.IService">
            <summary>
            服务基类（提供服务启动、停止、是否正在运行以及日志等功能）
            </summary>
        </member>
        <member name="M:TCSoft.Services.IService.Start">
            <summary>
            启动服务
            </summary> 
        </member>
        <member name="M:TCSoft.Services.IService.Stop">
            <summary>
             停止服务
            </summary>
        </member>
        <member name="M:TCSoft.Services.IService.Restart">
            <summary>
            重启服务
            </summary>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Services.IService.IsRunning">
            <summary>
            线程是否在运行
            </summary>
        </member>
        <member name="P:TCSoft.Services.IService.Logger">
            <summary>
            日志
            </summary>
        </member>
        <member name="P:TCSoft.Services.IService.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:TCSoft.Services.IService.Enabled">
            <summary>
            服务是否启动
            </summary>
        </member>
        <member name="P:TCSoft.Services.IService.Status">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Services.ServiceBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Services.ServiceBase.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Services.ServiceBase.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Services.ServiceBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:TCSoft.Services.ServiceBase.ServiceName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:TCSoft.Services.ServiceBase.Status">
            <summary>
            获取服务状态 
            </summary>
        </member>
        <member name="P:TCSoft.Services.ServiceBase.IsRunning">
            <summary>
            是否正在运行
            </summary>
        </member>
        <member name="E:TCSoft.Services.ServiceBase.Stoped">
            <summary>
            服务已经停止（事件）
            </summary>
        </member>
        <member name="E:TCSoft.Services.ServiceBase.Stoping">
            <summary>
            服务正在停止（事件）,初始化关闭设置
            </summary>
        </member>
        <member name="E:TCSoft.Services.ServiceBase.Started">
            <summary>
            服务已经启动（事件）
            </summary>
        </member>
        <member name="E:TCSoft.Services.ServiceBase.Starting">
            <summary>
            服务正在启动（事件），初始化启动服务
            </summary>
        </member>
        <member name="P:TCSoft.Services.ServiceBase.Logger">
            <summary>
            服务日志
            </summary>
        </member>
        <member name="P:TCSoft.Services.ServiceBase.Enabled">
            <summary>
            服务是否启动
            </summary>
        </member>
        <member name="F:TCSoft.Network.HttpListenServiceBase._mNumConnections">
            <summary>
             the maximum number of connections the Service is designed to handle simultaneously 
            </summary>
        </member>
        <member name="F:TCSoft.Network.HttpListenServiceBase._mReadPool">
            <summary>
             pool of reusable SocketAsyncEventArgs objects for write, read and accept socket operations
            </summary>
        </member>
        <member name="F:TCSoft.Network.HttpListenServiceBase._mNumConnectedSockets">
            <summary>
            the total number of clients connected to the server 
            </summary>
        </member>
        <member name="M:TCSoft.Network.HttpListenServiceBase.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:TCSoft.Network.HttpListenServiceBase.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="listenIp"></param>
            <param name="port"></param>
        </member>
        <member name="M:TCSoft.Network.HttpListenServiceBase.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Create an uninitialized server instance.  
            To start the server listening for connection requests
            call the Init method followed by Start method
            </summary>   
            <param name="numConnections">the maximum number of connections the Service is designed to handle simultaneously</param>
            <param name="receiveBufferSize">buffer size to use for each socket I/O operation</param>
            <param name="maxPageSize"></param>
            <param name="listenIp"></param>
            <param name="port"> </param>
            <param name="encoding"></param>
        </member>
        <member name="M:TCSoft.Network.HttpListenServiceBase.Init">
            <summary>
            Initializes the server by preallocating reusable buffers and 
            context objects.  These objects do not need to be preallocated 
            or reused, but it is done this way to illustrate how the API can 
            easily be used to create reusable objects to increase server performance. 
            </summary>
        </member>
        <member name="M:TCSoft.Network.HttpListenServiceBase.StartAccept(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Begins an operation to accept a connection request from the client  
            </summary>
            <param name="acceptEventArg"></param>
        </member>
        <member name="M:TCSoft.Network.HttpListenServiceBase.AcceptEventArgCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is the callback method associated with Socket.AcceptAsync 
            operations and is invoked when an accept operation is complete
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TCSoft.Network.HttpListenServiceBase.OnSocketEventCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary> 
            This method is called whenever a receive or send operation is completed on a socket 
            </summary>
            <param name="sender"></param>
            <param name="e">SocketAsyncEventArg associated with the completed receive operation</param>
        </member>
        <member name="M:TCSoft.Network.HttpListenServiceBase.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary> 
            This method is invoked when an asynchronous receive operation completes. 
            If the remote host closed the connection, then the socket is closed.  
            If data was received then the data is echoed back to the client.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TCSoft.Network.HttpListenServiceBase.ProcessContext(TCSoft.Network.HttpListenContext)">
            <summary>
            处理信息，并返回响应
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Network.HttpListenServiceBase.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is invoked when an asynchronous send operation completes.  
            The method issues another receive on the socket to read any additional 
            data sent from the client 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TCSoft.Network.HttpListenServiceBase.CloseClientSocket(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TCSoft.Network.HttpListenServiceBase.ToJsonMessage(System.String)">
            <summary>
            返回JSON格式消息
            </summary>
            <param name="strContent"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Network.HttpListenServiceBase.SuccessResponse(System.String)">
            <summary>
            
            </summary>
            <param name="strContent"></param>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Network.HttpListenServiceBase.Identity">
            <summary>
            HTTP监控信息标识
            </summary>
        </member>
        <member name="P:TCSoft.Network.HttpListenServiceBase.ListenPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Network.HttpListenServiceBase.ListenIp">
            <summary>
            监听IP
            </summary>
        </member>
        <member name="E:TCSoft.Network.HttpListenServiceBase.ReceviceCompleted">
            <summary>
             
            </summary> 
        </member>
        <member name="T:TCSoft.Network.SocketReceivedEventHandler">
            <summary>
            套接接收数据事件委托定义
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="T:TCSoft.Network.UdpReceviceEventArgs">
            <summary>
            Udp接收数据事件参数
            </summary>
        </member>
        <member name="P:TCSoft.Network.UdpReceviceEventArgs.Data">
            <summary>
            接收的数据内容
            </summary>
        </member>
        <member name="P:TCSoft.Network.UdpReceviceEventArgs.RemoteEndPoint">
            <summary>
            UDP远程IP地址信息
            </summary>
        </member>
        <member name="T:TCSoft.Rest.HttpContextExtension">
            <summary>
            HttpContext 扩展信息 
            </summary>
        </member>
        <member name="M:TCSoft.Rest.HttpContextExtension.ReadAsString(System.Web.HttpContext)">
            <summary>
            返回context.Request输入流转的UTF8字符串
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.HttpContextExtension.QueryString(System.Web.HttpContext)">
            <summary>
             获取 HTTP 查询字符串变量集合
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.HttpContextExtension.GetIntFromQueryString(System.Web.HttpContext,System.String)">
            <summary>
            根据键值从HTTP查询字符串变量集合中获取Int值
            </summary>
            <param name="context"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.HttpContextExtension.GetValueFromQueryString(System.Web.HttpContext,System.String)">
            <summary>
            根据键值从HTTP查询字符串变量集合中获取字符串值
            </summary>
            <param name="context"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Rest.JsonPropertyFilterEnum">
            <summary>
            JSON属性过滤器列表（提供给<see cref="T:TCSoft.Rest.RestResolverFilterAttribute"/>使用）。
            该枚举值作为过滤器的Json属性解析过滤器唯一键值存在。
            </summary>
        </member>
        <member name="F:TCSoft.Rest.JsonPropertyFilterEnum.None">
            <summary>
            不需要过滤处理
            </summary>
        </member>
        <member name="F:TCSoft.Rest.JsonPropertyFilterEnum.RestResponseResult">
            <summary>
            RestResponse类型的Result Json属性需要被替换
            </summary>
        </member>
        <member name="F:TCSoft.Rest.JsonPropertyFilterEnum.SettingModelData">
            <summary>
             SettingModel类型的Data数据Json属性需要使用过滤器
            </summary>
        </member>
        <member name="T:TCSoft.Rest.JsonUtils">
            <summary>
            使用Newtonsoft.Json序列化/反序列化JSON数据工具类
            </summary>
        </member>
        <member name="M:TCSoft.Rest.JsonUtils.DeserializeObject``1(System.String)">
            <summary>
            反序列化json字符串为一个对象
            </summary>
            <param name="jsonContent"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.JsonUtils.DeserializeObject(System.String,System.Type)">
            <summary>
            反序列化json字符串为一个对象
            </summary>
            <param name="jsonContent"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.JsonUtils.DeserializeObject``2(System.String,TCSoft.Rest.JsonPropertyFilterEnum)">
            <summary>
            REST响应 JSON反序列化
            <example>
            对如下类对象的反序列化:
             public sealed class JsonContent 
             {  
                 public RestStatus StatusCode { get; set; } 
                 [RestResolverFilter(filterEnum)]
                 public IJsonContent Content { get; set; }
             }
            这里Content是接口，在反序列化时需要具体化类型。而其反序列化类型的查找，通过filterEnum获取
            </example>
            </summary> 
            <typeparam name="TSubContentImp">JSON模型子内容，其以接口类型实现,需要根据类型具体化</typeparam>
            <typeparam name="T">内容主体格式</typeparam>
            <param name="jsonContent"></param>
            <param name="filterEnum"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.JsonUtils.DeserializeObject(System.Type,System.String,System.Collections.Generic.IDictionary{TCSoft.Rest.JsonPropertyFilterEnum,System.Type})">
            <summary>
            REST响应 JSON反序列化
            <example>
            对如下类对象主体内容形如:
             public sealed class JsonContent 
             {  
                 public RestStatus StatusCode { get; set; } 
                 [RestResolverFilter(filterEnum)]
                 public IJsonContent Content { get; set; }
             }
            这里Content是接口，在反序列化时需要具体化类型。而其反序列化类型的查找，通过filterEnum获取。
            在构造反序列化解析器时，传入一个反序列化实现类型字典以供查找实现类型。
            </example>
            </summary>   
            <param name="type"></param>
            <param name="jsonContent"></param>
            <param name="dicPropertyNameType">传入一个反序列化实现类型字典以供查找实现类型</param> 
            <returns>返回反序列化后的对象实体</returns>
        </member>
        <member name="M:TCSoft.Rest.JsonUtils.DeserializeObject``1(System.String,System.Collections.Generic.IDictionary{TCSoft.Rest.JsonPropertyFilterEnum,System.Type})">
            <summary>
            REST响应 JSON反序列化
            <example>
            对如下类对象主体内容形如:
             public sealed class JsonContent 
             {  
                 public RestStatus StatusCode { get; set; } 
                 [RestResolverFilter(filterEnum)]
                 public IJsonContent Content { get; set; }
             }
            这里Content是接口，在反序列化时需要具体化类型。而其反序列化类型的查找，通过filterEnum获取。
            在构造反序列化解析器时，传入一个反序列化实现类型字典以供查找实现类型。
            </example>
            </summary>  
            <typeparam name="T">内容主体格式</typeparam>
            <param name="jsonContent"></param>
            <param name="dicPropertyNameType">传入一个反序列化实现类型字典以供查找实现类型</param> 
            <returns>返回反序列化后的对象实体</returns>
        </member>
        <member name="M:TCSoft.Rest.JsonUtils.DeserializeObject``2(System.String,System.Collections.Generic.IDictionary{TCSoft.Rest.JsonPropertyFilterEnum,System.Type})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSubContentImp"></typeparam>
            <param name="jsonContent"></param>
            <param name="dicPropertyNameType"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.JsonUtils.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
            <summary>
            序列化对象
            </summary>
            <param name="obj"></param>
            <param name="converters"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.JsonUtils.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="formatting"></param>
            <param name="converters"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.JsonUtils.DeserializeResponse``1(System.String)">
            <summary>
            REST响应 JSON反序列化
            <example>
            对如下类对象的反序列化:
             public sealed class RestResponse 
             {  
                 public RestStatus StatusCode { get; set; } 
                 [JsonProperty("Result")]   
                 public IJsonContent Content { get; set; }
             }
            这里Content是接口，在反序列化时需要具体化类型.
            主要是在RestClient中处理响应时需要用到
            </example>
            </summary> 
            <typeparam name="TSubContentImp">JSON模型子内容，其以接口类型实现,需要根据类型具体化</typeparam> 
            <param name="jsonContent"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.JsonUtils.DeserializeResponse(System.String)">
            <summary>
            REST响应 JSON反序列化 
            </summary>  
            <param name="jsonContent"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.JsonUtils.DeserializeResponse``2(System.String)">
            <summary>
            REST响应 JSON反序列化
            <example>
             public sealed class RestResponse 
             {  
                 public RestStatus StatusCode { get; set; } 
                 [JsonProperty("Result")]  
                 public IJsonContent Content { get; set; }
             }
            这里Content是接口，在反序列化时需要具体化类型.
            主要是在Rest Client中处理响应时需要用到
            </example>
            </summary> 
            <typeparam name="TDataContentImp"></typeparam>
            <typeparam name="TSubContentImp">JSON模型子内容，其以接口类型实现,需要根据类型具体化</typeparam> 
            <param name="jsonContent"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.JsonUtils.Deserialize``1(System.String)">
            <summary>
            JSON反序列化 
            </summary>
            <typeparam name="T"></typeparam>  
            <param name="jsonContent"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.JsonUtils.ToJsonList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <param name="collection"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Rest.CustomPropertyChangingEventArgs`1">
            <summary>
            属性修改事件自定义参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TCSoft.Rest.CustomPropertyChangingEventArgs`1.#ctor(System.String,`0)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:TCSoft.Rest.CustomPropertyChangingEventArgs`1.NewValue">
            <summary>
            属性新值
            </summary>
        </member>
        <member name="T:TCSoft.Rest.JsonContentExtenstion">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Rest.JsonContentExtenstion.ToJsonString(TCSoft.Rest.IJsonContent,Newtonsoft.Json.JsonConverter[])">
            <summary>
            
            </summary>
            <param name="content"></param>
            <param name="converters"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Rest.RestContentContractResolver">
            <summary>
            Rest内容主体解析器
            </summary>
        </member>
        <member name="M:TCSoft.Rest.RestContentContractResolver.#ctor(System.Collections.Generic.IDictionary{TCSoft.Rest.JsonPropertyFilterEnum,System.Type})">
            <summary>
            
            </summary>
            <param name="dicPropertyNameType">JSON属性过滤器列表，所有过滤器中的属性均为需要指定类型重构反序列化组件的</param>
        </member>
        <member name="M:TCSoft.Rest.RestContentContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            创建反序列化中需要使用到的JsonProperty属性列表
            </summary>
            <param name="type"></param>
            <param name="memberSerialization"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Rest.RestResolverFilterAttribute">
            <summary>
            Json属性解析过滤器。主要用于某些抽象类反序列化化查找具体实现类。
            反序列化时，需要调用类对象的默认构造函数，所以需要一个包含默认函数的具体实现类。
            </summary>
        </member>
        <member name="M:TCSoft.Rest.RestResolverFilterAttribute.#ctor(TCSoft.Rest.JsonPropertyFilterEnum)">
            <summary>
            
            </summary>
            <param name="uniqueKey">过滤器唯一键值</param>
        </member>
        <member name="P:TCSoft.Rest.RestResolverFilterAttribute.UniqueKey">
            <summary>
            过滤器唯一键值
            </summary>
        </member>
        <member name="T:TCSoft.Rest.ResponseContent">
            <summary>
            Rest服务响应信息(服务端使用，需要序列化的位置)
            </summary>
        </member>
        <member name="T:TCSoft.Rest.ResponseContent`1">
            <summary>
            Rest服务响应信息(客户端使用，需要反序列化的位置)
            </summary>
        </member>
        <member name="T:TCSoft.Rest.ICommandResult">
            <summary>
            CQRS模式中Command的返回结果
            </summary>
        </member>
        <member name="M:TCSoft.Rest.ResponseContent`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:TCSoft.Rest.ResponseContent`1.Content">
            <summary>
             Rest服务响应内容
            </summary>
        </member>
        <member name="P:TCSoft.Rest.ResponseContent`1.StatusCode">
            <summary>
            Rest服务响应状态
            </summary> 
        </member>
        <member name="M:TCSoft.Rest.ResponseContent.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TCSoft.Rest.ResponseContent.#ctor(TCSoft.Rest.IJsonContent)">
            <summary>
            根据Rest内容构造响应信息
            </summary>
            <param name="content"></param>
        </member>
        <member name="P:TCSoft.Rest.ResponseContent.Content">
            <summary>
             Rest服务响应内容
            </summary>
        </member>
        <member name="T:TCSoft.Rest.RestServiceBaseExtensions">
            <summary>
            RestService服务扩展方法
            </summary>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.Response(TCSoft.Rest.RestServiceBase,TCSoft.Rest.IJsonContent)">
            <summary>
            操作成功，单不携带额外的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.Response(TCSoft.Rest.RestServiceBase)">
            <summary>
            操作成功，单不携带额外的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.NopowerResponse(TCSoft.Rest.RestServiceBase)">
            <summary>
            无权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.Response(TCSoft.Rest.RestServiceBase,TCSoft.Rest.RestStatus)">
            <summary>
             
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.ErrorResponse(TCSoft.Rest.RestServiceBase)">
            <summary>
             
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.NoImpResponse(TCSoft.Rest.RestServiceBase)">
            <summary>
            未实现
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.ErrorResponse(TCSoft.Rest.RestServiceBase,System.String)">
            <summary>
            操作成功，单不携带额外的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.DefaultErrorResponse(TCSoft.Rest.RestServiceBase,System.String)">
            <summary>
            操作成功，单不携带额外的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.DeserializeResponse``1(TCSoft.Rest.RestServiceBase,System.String)">
            <summary>
            REST响应 JSON反序列化
            <example>
            对如下类对象的反序列化:
             public sealed class RestResponse 
             {  
                 public RestStatus StatusCode { get; set; } 
                 [JsonProperty("Result")]   
                 public IJsonContent Content { get; set; }
             }
            这里Content是接口，在反序列化时需要具体化类型.
            主要是在RestClient中处理响应时需要用到
            </example>
            </summary> 
            <typeparam name="TSubContentImp">JSON模型子内容，其以接口类型实现,需要根据类型具体化</typeparam>
            <param name="restService"></param>
            <param name="jsonContent"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.DeserializeResponse(TCSoft.Rest.RestServiceBase,System.String)">
            <summary>
            REST响应 JSON反序列化 
            </summary> 
            <param name="restService"></param>
            <param name="jsonContent"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.DeserializeResponse``2(TCSoft.Rest.RestServiceBase,System.String)">
            <summary>
            REST响应 JSON反序列化
            <example>
             public sealed class RestResponse 
             {  
                 public RestStatus StatusCode { get; set; } 
                 [JsonProperty("Result")]  
                 public IJsonContent Content { get; set; }
             }
            这里Content是接口，在反序列化时需要具体化类型.
            主要是在Rest Client中处理响应时需要用到
            </example>
            </summary> 
            <typeparam name="TDataContentImp"></typeparam>
            <typeparam name="TSubContentImp">JSON模型子内容，其以接口类型实现,需要根据类型具体化</typeparam>
            <param name="restService"></param>
            <param name="jsonContent"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.DeserializeData``1(TCSoft.Rest.RestServiceBase,System.String)">
            <summary>
            JSON反序列化(反序列化包含属性Data的JSON字符串，其中Data数据内容派生自ParamsDataBase)
            <example>
            对如下类对象进行反序列化
             public sealed class SettingModel : SettingModelBase 
             {  
                 public IJsonContent Data { get; set; }
             }
            这里Content是接口，在反序列化时需要具体化类型.
            主要是在Rest Client中处理响应时需要用到
            </example>
            </summary> 
            <param name="restService"></param>
            <typeparam name="TElement">JSON模型子内容，其以接口类型实现,需要根据类型具体化</typeparam>
            <param name="jsonContent"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.DeserializeContent``1(TCSoft.Rest.RestServiceBase,System.String)">
            <summary>
            JSON反序列化(反序列化包含属性Data的JSON字符串，其中Data数据内容派生自ParamsDataBase)
            <example>
            对如下类对象进行反序列化
             public sealed class SettingModel : SettingModelBase 
             {  
                 public IJsonContent Data { get; set; }
             }
            这里Content是接口，在反序列化时需要具体化类型.
            主要是在Rest Client中处理响应时需要用到
            </example>
            </summary> 
            <param name="restService"></param>
            <typeparam name="TSubElement">JSON模型子内容，其以接口类型实现,需要根据类型具体化</typeparam>
            <param name="jsonContent"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.Deserialize``1(TCSoft.Rest.RestServiceBase,System.String)">
            <summary>
            JSON反序列化 
            </summary>
            <typeparam name="T"></typeparam> 
            <param name="restService"></param>
            <param name="jsonContent"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.ToJsonList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <param name="collection"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBaseExtensions.ToJsonListResponse``1(TCSoft.Rest.RestServiceBase,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <param name="restService"></param>
            <param name="collection"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Rest.RestStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.Rest.RestStatus.None">
            <summary>
            无定义
            </summary>
        </member>
        <member name="F:TCSoft.Rest.RestStatus.Success">
            <summary>
            操作成功
            </summary>
        </member>
        <member name="F:TCSoft.Rest.RestStatus.NoPower">
            <summary>
            无权限
            </summary>
        </member>
        <member name="F:TCSoft.Rest.RestStatus.NoImp">
            <summary>
            暂无实现
            </summary>
        </member>
        <member name="F:TCSoft.Rest.RestStatus.Error">
            <summary>
            其它错误
            </summary>
        </member>
        <member name="F:TCSoft.Rest.RestStatus.InvalidCredential">
            <summary>
            无效验证信息
            </summary>
        </member>
        <member name="F:TCSoft.Rest.RestStatus.InvalidChars">
            <summary>
            空请求,没有POST主体内容
            </summary>
        </member>
        <member name="T:TCSoft.Rest.JsonList`1">
            <summary>
            支持支持Json序列化的列表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TCSoft.Rest.JsonList`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TCSoft.Rest.JsonList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            构造函数
            </summary>
            <param name="collection">数据列表</param>
        </member>
        <member name="T:TCSoft.Rest.MultifunctionalContent">
            <summary>
            多功能内容（一个REST URL资源可根据内容作多种功能实现）
            </summary> 
        </member>
        <member name="P:TCSoft.Rest.MultifunctionalContent.Method">
            <summary>
            
            </summary> 
        </member>
        <member name="P:TCSoft.Rest.MultifunctionalContent.Data">
            <summary>
            参数内容
            </summary> 
        </member>
        <member name="T:TCSoft.Rest.MultifunctionalContent`1">
            <summary>
             多功能内容（一个REST URL资源可根据内容作多种功能实现）,其携带一个主键值
            </summary>
            <typeparam name="T"></typeparam> 
        </member>
        <member name="P:TCSoft.Rest.MultifunctionalContent`1.Id">
            <summary>
            
            </summary> 
        </member>
        <member name="T:TCSoft.Rest.SingleContent`1">
            <summary>
            单一值域的Rest主体内容（可序列化JSON字符串）
            </summary>
            <typeparam name="T"></typeparam> 
        </member>
        <member name="P:TCSoft.Rest.SingleContent`1.Value">
            <summary>
            
            </summary> 
        </member>
        <member name="T:TCSoft.Rest.MessageContent">
            <summary>
            支持Rest服务的消息内容（可JSON序列化）
            </summary> 
        </member>
        <member name="P:TCSoft.Rest.MessageContent.Message">
            <summary>
            消息类型
            </summary> 
        </member>
        <member name="T:TCSoft.Rest.BoolContent">
            <summary>
            布尔类型Rest内容主体
            </summary> 
        </member>
        <member name="P:TCSoft.Rest.BoolContent.Flag">
            <summary>
            标题当前内容是True或False
            </summary> 
        </member>
        <member name="T:TCSoft.Rest.EmptyContent">
            <summary>
            布尔类型Rest内容主体
            </summary> 
        </member>
        <member name="T:TCSoft.Rest.JsonDictionary`2">
            <summary>
            支持支持Json序列化的列表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TCSoft.Security.AuthorizationManager">
            <summary>
            身份认证管理器
            </summary>
        </member>
        <member name="M:TCSoft.Security.AuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)">
            <summary>
            
            </summary>
            <param name="operationContext"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Security.Cryptography.TripleDESHelper">
            <summary>
            TripleDES加密辅助类
            </summary>
        </member>
        <member name="M:TCSoft.Security.Cryptography.TripleDESHelper.Encrypt(System.String)">
            <summary>
            Encrypt the given string using the default key.
            </summary>
            <param name="strToEncrypt">The string to be encrypted.</param>
            <returns>The encrypted string.</returns>
        </member>
        <member name="M:TCSoft.Security.Cryptography.TripleDESHelper.Decrypt(System.String)">
            <summary>
            Decrypt the given string using the default key.
            </summary>
            <param name="strEncrypted">The string to be decrypted.</param>
            <returns>The decrypted string.</returns>
        </member>
        <member name="M:TCSoft.Security.Cryptography.TripleDESHelper.Encrypt(System.String,System.String)">
            <summary>
            Encrypt the given string using the specified key.
            </summary>
            <param name="strToEncrypt">The string to be encrypted.</param>
            <param name="strKey">The encryption key.</param>
            <returns>The encrypted string.加密失败返回原字符串</returns>
        </member>
        <member name="M:TCSoft.Security.Cryptography.TripleDESHelper.Decrypt(System.String,System.String)">
            <summary>
            Decrypt the given string using the specified key.
            </summary>
            <param name="strEncrypted">The string to be decrypted.</param>
            <param name="strKey">The decryption key.</param>
            <returns>The decrypted string.解密失败返回原字符串</returns>
        </member>
        <member name="P:TCSoft.Security.Cryptography.TripleDESHelper.Key">
            <summary>
            设置键值
            </summary>
        </member>
        <member name="T:TCSoft.Security.CustomX509Validator">
            <summary>
            X509认证验证器
            </summary>
        </member>
        <member name="M:TCSoft.Security.CustomX509Validator.Validate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Validates a certificate.
            </summary>
            <param name="certificate">The certificate the validate.</param>
        </member>
        <member name="T:TCSoft.Security.Cryptography.DESHelper">
            <summary>
            加密辅助方法
            </summary>
        </member>
        <member name="M:TCSoft.Security.Cryptography.DESHelper.EncryptDES(System.String,System.String)">
            <summary> 
            DES加密字符串 
            </summary> 
            <param name="encryptString">待加密的字符串</param> 
            <param name="encryptKey">加密密钥,要求为8位</param> 
            <returns>加密成功返回加密后的字符串，失败返回源串</returns> 
        </member>
        <member name="M:TCSoft.Security.Cryptography.DESHelper.DecryptDES(System.String,System.String)">
            <summary> 
            DES解密字符串 
            </summary> 
            <param name="decryptString">待解密的字符串</param> 
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param> 
            <returns>解密成功返回解密后的字符串，失败返源串</returns> 
        </member>
        <member name="T:TCSoft.Security.Cryptography.FileCryptoHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Security.Cryptography.FileCryptoHelper.EncryptData(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            加密文件 
            </summary>
            <param name="inName"></param>
            <param name="outName"></param>
            <param name="desKey"></param>
            <param name="desIV"></param>
        </member>
        <member name="M:TCSoft.Security.Cryptography.FileCryptoHelper.DecryptData(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            解密文件 
            </summary>
            <param name="inName"></param>
            <param name="outName"></param>
            <param name="desKey"></param>
            <param name="desIV"></param>
        </member>
        <member name="T:TCSoft.Security.Cryptography.DefaultRijndaelAlgorithm">
            <summary>
            对称算法加密(Rijndael)
            </summary>
        </member>
        <member name="M:TCSoft.Security.Cryptography.DefaultRijndaelAlgorithm.#ctor">
            <summary>    
            对称加密类的构造函数    
            </summary>    
        </member>
        <member name="M:TCSoft.Security.Cryptography.DefaultRijndaelAlgorithm.GetLegalKey">
            <summary>    
            获得密钥    
            </summary>    
            <returns>密钥</returns>    
        </member>
        <member name="M:TCSoft.Security.Cryptography.DefaultRijndaelAlgorithm.GetLegalIV">
            <summary>    
            获得初始向量IV    
            </summary>    
            <returns>初试向量IV</returns>    
        </member>
        <member name="M:TCSoft.Security.Cryptography.DefaultRijndaelAlgorithm.Encrypto(System.String)">
            <summary>    
            加密方法    
            </summary>    
            <param name="Source">待加密的串</param>    
            <returns>经过加密的串</returns>    
        </member>
        <member name="M:TCSoft.Security.Cryptography.DefaultRijndaelAlgorithm.Decrypto(System.String)">
            <summary>    
            解密方法    
            </summary>    
            <param name="Source">待解密的串</param>    
            <returns>经过解密的串</returns>    
        </member>
        <member name="T:TCSoft.Security.IAuthenticationService">
            <summary>
            授权服务
            </summary>
        </member>
        <member name="M:TCSoft.Security.IAuthenticationService.Login(System.String,System.String)">
            <summary>
            验证用户是否有效
            </summary>  
            <param name="userName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Security.UserNamePasswordCustomValidator">
            <summary>
            自定义用户名、密码验证器
            </summary>
        </member>
        <member name="M:TCSoft.Security.UserNamePasswordCustomValidator.Validate(System.String,System.String)">
            <summary>
             Validates the user name and password combination.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:TCSoft.Rest.RestServiceBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBase.ProcessRequest(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBase.Process(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBase.ProcessGet(System.Web.HttpContext,System.String)">
            <summary>
            GET方法处理
            </summary>
            <param name="context"></param>
            <param name="requestBody"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBase.ProcessPut(System.Web.HttpContext,System.String)">
            <summary>
            Put方法处理
            </summary>
            <param name="context"></param>
            <param name="requestBody"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBase.ProcessPost(System.Web.HttpContext,System.String)">
            <summary>
            POST方法处理
            </summary>
            <param name="context"></param>
            <param name="requestBody"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBase.ProcessDelete(System.Web.HttpContext,System.String)">
            <summary>
            删除处理
            </summary>
            <param name="context"></param>
            <param name="requestBody"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Rest.RestServiceBase.ProcessDefault(System.Web.HttpContext,System.String)">
            <summary>
            默认处理
            </summary>
            <param name="context"></param>
            <param name="requestBody"></param>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Rest.RestServiceBase.Logger">
            <summary>
            日志
            </summary>
        </member>
        <member name="P:TCSoft.Rest.RestServiceBase.IsReusable">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.NetMailUtils.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="svrName">smtp服务器</param>
            <param name="iPort">smtp服务器端口 0=默认</param>
            <param name="strName">验证email</param>
            <param name="strPwd">验证email密码</param>
        </member>
        <member name="M:TCSoft.Utitlies.NetMailUtils.Send">
            <summary>
            发送
            </summary>
            <returns>1=正常发送,-1=发送出错</returns>
        </member>
        <member name="P:TCSoft.Utitlies.NetMailUtils.Email">
            <summary>
            要发送的邮件
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.NetMailUtils.ServerName">
            <summary>
            设置邮件服务器
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.NetMailUtils.ServerPort">
            <summary>
            设置服务器端口号
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.NetMailUtils.MailServerUserName">
            <summary>
            SMTP认证时使用的用户名
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.NetMailUtils.MailServerPassWord">
            <summary>
            SMTP认证时使用的密码
            </summary>
        </member>
        <member name="T:TCSoft.Utitlies.PdfEngine">
            <summary>
            pdf引擎
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.ToPdfResult.Flag">
            <summary>
            操作成功与否标记为 true 成功，false 错误
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.ToPdfResult.FilePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.ToPdfResult.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="T:TCSoft.Utitlies.UrlOper">
            <summary>
            URL的操作类
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.UrlOper.Base64Encrypt(System.String)">
            <summary>
            URL的64位编码
            </summary>
            <param name="sourthUrl">URL</param>
            <returns>返回64位编码字符串</returns>
        </member>
        <member name="M:TCSoft.Utitlies.UrlOper.Base64Decrypt(System.String)">
            <summary>
            URL的64位解码
            </summary>
            <param name="eStr">需要处理的字符串</param>
            <returns>返回64位编码字符串</returns>
        </member>
        <member name="M:TCSoft.Utitlies.UrlOper.IsBase64(System.String)">
            <summary>
            是否是Base64字符串
            </summary>
            <param name="eStr">需要验证的字符串</param>
            <returns>Bool 是true 否false</returns>
        </member>
        <member name="M:TCSoft.Utitlies.UrlOper.AddParam(System.String,System.String,System.String)">
            <summary>
            添加URL参数
            </summary>
            <param name="url">要处理的URL</param>
            <param name="paramName">参数名称</param>
            <param name="value">参数的值</param>
            <returns>返回url参数字符串</returns>
        </member>
        <member name="M:TCSoft.Utitlies.UrlOper.UpdateParam(System.String,System.String,System.String)">
            <summary>
            更新URL参数
            </summary>
            <param name="url">要处理的URL</param>
            <param name="paramName">参数名称</param>
            <param name="value">参数的值</param>
            <returns>返回更新后的URL</returns>
        </member>
        <member name="M:TCSoft.Utitlies.UrlOper.GetDomain(System.String,System.String@,System.String@)">
            <summary>
            分析URL所属的域
            </summary>
            <param name="fromUrl"></param>
            <param name="domain"></param>
            <param name="subDomain"></param>
        </member>
        <member name="M:TCSoft.Utitlies.UrlOper.ParseUrl(System.String,System.String@,System.Collections.Specialized.NameValueCollection@)">
            <summary>
            分析 url 字符串中的参数信息
            </summary>
            <param name="url">输入的 URL</param>
            <param name="baseUrl">输出 URL 的基础部分</param>
            <param name="nvc">输出分析后得到的 (参数名,参数值) 的集合</param>
        </member>
        <member name="T:TCSoft.Utitlies.Utils">
            <summary>
            辅助工具箱，包括IP获取、字符转换、枚举处理等
            </summary>
            <summary>
            辅助工具箱，包括IP获取、字符转换、枚举处理等
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetDiffValue``1(``0,``0,System.Collections.Generic.List{System.String}@,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取相同类型属性值不一致的【属性名称-属性新旧值列表】 
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="oldObj"></param>
            <param name="newObj"></param>
            <param name="datetimeFields">时间控件列表</param>
            <param name="searchFields">需要查询的属性字段</param>
            <param name="exceptSearchFields">需要排除的属性字段</param>
            <param name="shouldAddFields">必须包含的属性字段</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetDiffValue``1(``0,``0)">
            <summary>
            获取相同类型属性值不一致的【属性名称-属性新旧值列表】 
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="oldObj"></param>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetCompareValue(System.Object,System.Object)">
            <summary>
            获取数据对比列表
            </summary> 
            <param name="oldObj">旧数据对象，要求实体类型完成一样</param>
            <param name="newObj">新数据对象，要求实体类型完成一样</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.SetValue``1(``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary> 
            根据属性名称-值列表设置对象值
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="obj"></param> 
            <param name="propertyNameValue"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.ReplaceByRegexAction(System.String,System.String,System.Action{System.Text.RegularExpressions.Match})">
            <summary>
            使用正则查找，并安装replaceAction委托执行替换。
            </summary>
            <param name="pattern">正则表达式</param>
            <param name="inputText">输入文本</param>
            <param name="replaceAction">替换行为委托。包括一个参数：匹配结果对象
            </param>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.CreateDesktopLink(System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="Created"></param>
            <param name="destopLinkname"></param>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetPrintQueueByPrintName(System.String)">
            <summary>
            通过打印机名(路径)称获取打印队列，如果是共享打印机，则前面包含计算机名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.EnumComputers">
            <summary>
            获取局域网内电脑名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.IsDouble(System.Object)">
            <summary>
            
            </summary>
            <param name="Expression"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.FormatLong(TCSoft.Utitlies.CarryMode,System.Int32,System.Object)">
            <summary>
            格式化输出字符串
            </summary>
            <param name="mode"></param>
            <param name="length"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.IsSupper(System.String)">
            <summary>
            是否为超级密码
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="F:TCSoft.Utitlies.Utils.Logger">
            <summary>
            日志处理
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.ResponseExcel(System.String,System.Web.UI.WebControls.Repeater)">
            <summary>
            把REPEATER导出EXCEL浏览器输出----REPEATER控件中不能有列排序的服务器控件
            </summary>
            <param name="repeaterName"></param>
            <param name="repeaterSource"></param>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.ToColor(System.String)">
            <summary>
            将字符串转换为Color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.MakePassword(System.Int32,System.String)">
            <summary>
            随机密码生成功
            </summary>
            <param name="pwdchars"></param>
            <param name="pwdlen"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.MakeVerifyCode(System.Int32,System.String)">
            <summary>
            生成随机验证码
            </summary>
            <param name="pwdchars"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.EncodeHtml(System.String)">
            <summary>
            替换html字符
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.StringToBytes(System.String)">
            <summary>
            将字符串转换为字节码
            </summary>
            <param name="s">ASCII码字符串</param>
            <returns>ASCII码字符串对应的字节码</returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.IsIP(System.String)">
            <summary>
            是否为ip
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetFirstIpAddress(System.String,System.String@)">
            <summary>
            获取指定字符串中的第一个Ip地址
            </summary>
            <param name="searchAddress"></param>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.SplitString(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.SplitString(System.String,System.String,System.Int32)">
            <summary>
            分割字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.PadStringArray(System.String[],System.Int32,System.Int32)">
            <summary>
            过滤字符串数组中每个元素为合适的大小
            当长度小于minLength时，忽略掉,-1为不限制最小长度
            当长度大于maxLength时，取其前maxLength位
            如果数组中有null元素，会被忽略掉
            </summary>
            <param name="minLength">单个元素最小长度</param>
            <param name="maxLength">单个元素最大长度</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.SplitString(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            分割字符串
            </summary>
            <param name="strContent">被分割的字符串</param>
            <param name="strSplit">分割符</param>
            <param name="ignoreRepeatItem">忽略重复项</param>
            <param name="maxElementLength">单个元素最大长度</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.SplitString(System.String,System.String,System.Boolean)">
            <summary>
            分割字符串
            </summary>
            <param name="strContent">被分割的字符串</param>
            <param name="strSplit">分割符</param>
            <param name="ignoreRepeatItem">忽略重复项</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.DistinctStringArray(System.String[],System.Int32)">
            <summary>
            清除字符串数组中的重复项
            </summary>
            <param name="strArray">字符串数组</param>
            <param name="maxElementLength">字符串数组中单个元素的最大长度</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.DistinctStringArray(System.String[])">
            <summary>
            清除字符串数组中的重复项
            </summary>
            <param name="strArray">字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.InIPArray(System.String,System.String[])">
            <summary>
            返回指定IP是否在指定的IP数组所限定的范围内, IP数组内的IP地址可以使用*表示该IP段任意, 例如192.168.1.*
            </summary>
            <param name="ip"></param>
            <param name="iparray"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetStringLength(System.String)">
            <summary>
            返回字符串真实长度, 1个汉字长度为2
            </summary>
            <returns>字符长度</returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetLocalAddresses">
            <summary>
            获取本机IP地址列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.StructToBytes(System.Object)">
            <summary>
            struct转换为byte[]
            </summary>
            <param name="structObj"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.BytesToStruct(System.Byte[],System.Type)">
            <summary>
            byte[]转换为struct
            </summary>
            <param name="bytes"></param>
            <param name="strcutType"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.BytesToStruct``1(System.Byte[])">
            <summary>
            byte[]转换为struct
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetNetCardMacAddress">
            <summary>
            获取MAC地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetAddressIPs">
            <summary>
            获取本地IP地址信息
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.StrToToHexByte(System.String)">
            <summary>
            将16进制字符串转换为字节码
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.ByteToHex(System.Byte[])">
            <summary>
            将字节码转换为16进制字符串
            </summary>
            <param name="buf"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetASCIIString(System.Byte[])">
            <summary>
            返回buf的ASCII字符串，移除其中的控制位(ASCII值 IN[0,31] 或[127])。
            </summary>
            <param name="buf">需要转发为字符串的字节码数组</param>
            <returns>返回ASCII字符串</returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetUnicodeString(System.Byte[])">
            <summary>
            返回buf的ASCII字符串，移除其中的控制位(ASCII值 IN[0,31] 或[127])。
            </summary>
            <param name="buf">需要转发为字符串的字节码数组</param>
            <returns>返回ASCII字符串</returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetDefaultString(System.Byte[])">
            <summary>
             
            </summary>
            <param name="buf">需要转发为字符串的字节码数组</param>
            <returns>返回ASCII字符串</returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetUnicodeSubString(System.String,System.Int32,System.String)">
            <summary>
            获取Unicode子串
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <param name="pTailString"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetSubString(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            取指定长度的字符串
            </summary>
            <param name="pSrcString">要检查的字符串</param>
            <param name="pStartIndex">起始位置</param>
            <param name="pLength">指定长度</param>
            <param name="pTailString">用于替换的字符串</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.ParseHttpResponse(System.String,System.Int32@,System.String@)">
            <summary>
            解析HTTP响应信息
            </summary> 
            <param name="recContent"></param>
            <param name="contentLength">如果响应状态为OK，那么为Http Body(Bytes)长度</param>
            <param name="body">如果响应状态为OK，那么为Http Body内容</param>
            <returns>Http响应状态</returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetResponse(System.Net.Sockets.NetworkStream,System.Int32,System.Text.Encoding)">
            <summary>
            获取HTTP响应
            </summary>
            <param name="networkStream"></param>
            <param name="maxRecBufSize">最大接收缓存大小</param>
            <param name="encoding">编码机制</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetDisplayName(System.Object)">
            <summary>
            获取对象的DisplayNameAttribute属性值（如果为空，那么取类型全称）
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.MapPath(System.String)">
            <summary>
            Maps a virtual path to a physical disk path.
            </summary>
            <param name="path">The path to map. E.g. "~/bin"</param>
            <returns>The physical path. E.g. "c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.CheckFileExists(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.CheckDirectoryExists(System.String)">
            <summary>
            检查目录是否存在，如果不存在，那么创建。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.Md5(System.String)">
            <summary>
            MD5函数
            </summary>
            <param name="str">原始字符串</param>
            <returns>MD5结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.SHA256(System.String)">
            <summary>
            SHA256函数
            </summary>
            /// <param name="str">原始字符串</param>
            <returns>SHA256结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.DbConnectionTest(System.String)">
            <summary>
            测试连接数据库是否成功
            </summary>
            <returns>true :数据库连接正常 false:连接失败</returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetWaitingTimes(System.Nullable{System.DateTime})">
            <summary>
            获取等待天数
            </summary>
            <param name="inputTime"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetSpell(System.String,System.Boolean)">
            <summary>
            获取汉字的全拼
            </summary>
            <param name="x"></param>
            <param name="isAbbr"> </param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetFirstChar(System.String)">
            <summary>
            获取字符串的首字符
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetSpellAbbr(System.String)">
            <summary>
            汉字拼音缩写
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.EncodeToBase64(System.String)">
            <summary>
            将字符串转为Base64字符串
            </summary>
            <param name="pureString">原始的字符串</param>
            <returns>返回编码后的Base64字符串</returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.DecodeFromBase64(System.String)">
            <summary>
            将Url解码后的Base64字符串还原为其原始值（UrlEncodeToBase64逆向过程）
            </summary>
            <param name="base64String">base64字符串</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.IsImage(System.String)">
            <summary>
            是否为图片资源
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.IsWeixinBrowser(System.Web.HttpRequestBase)">
            <summary>
            判断是否是在微信浏览器里
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.Getdate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取日期值
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="date"></param>
            <param name="hour"></param>
            <param name="min"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.DateIsLargerOrEqual(System.DateTime,System.DateTime)">
            <summary>
             输入日期是否大于等于指定时间
            </summary>
            <param name="compairDate"></param>
            <param name="inputDate"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.DateIsLargerOrEqual(System.DateTime)">
            <summary>
            输入日期是否为今天或今天之后
            </summary> 
            <param name="inputDate"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetDifDays(System.DateTime)">
            <summary>
            获取当前年份到1900年1月1日相差的天数
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.ToBase64String(System.String)">
            <summary>
            UTF8字符串转化为Base64字符串
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.FromBase64String(System.String)">
            <summary>
            从Base64字符串中获取值UTF8字符串
            </summary>
            <param name="base64Str"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetEnumDesc``1(System.Object)">
            <summary>
            获取枚举对象的描述备注信息，如果没有那么返回枚举值得名称（通过判断枚举值是否携带属性CustomDescriptionAttribute，获取枚举描述信息）。
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="obj">可以有枚举值、枚举名称、枚举对象</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetEnumDesc(System.Object,System.Type)">
            <summary>
            获取枚举描述
            </summary>
            <param name="obj"></param>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetEnumDescList``1">
            <summary>
            获取枚举描述信息列表（通过判断枚举值是否携带属性CustomDescriptionAttribute，获取枚举描述信息）
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetEnum``1(System.Object)">
            <summary>
            根据DescriptionAttribute属性或枚举值、枚举字符串获取枚举对象实例（通过判断枚举值是否携带属性CustomDescriptionAttribute，获取枚举描述信息）。
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="descOrNameOrValue"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetDisplayName(System.Object,System.String)">
            <summary>
            获取指定属性的DisplayAttribute名称
            </summary>
            <param name="obj"></param>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetDisplayName``1(System.String)">
            <summary>
            获取指定属性的DisplayAttribute名称
            </summary> 
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetDisplayName(System.Type,System.String)">
            <summary>
            获取指定属性的DisplayAttribute名称
            </summary>
            <param name="objType"></param>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetTableName(System.Type)">
            <summary>
            获取表名。如果有<see cref="T:TCSoft.CustomTableNameAttribute"/>属性那么取该属性标记的表名，否则返回类型名称。
            </summary>
            <param name="objType"></param> 
            <returns>返回表名</returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetPropertyArgs(System.Object)">
            <summary>
            获取【属性名称-参数键值】列表,所有使用@开头的值都作为一个参数存在
            </summary> 
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.UpdatePropertyValue(System.Object,System.String,System.Object)">
            <summary>
            更新对象的属性值
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名称</param>
            <param name="value"></param>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.UpdatePropertiesValue(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取【属性名称-参数键值】列表,所有使用@开头的值都作为一个参数存在,并根据属性更新参数
            </summary>
            <param name="obj">对象</param>
            <param name="args"></param> 
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetUrlParamValues(System.String)">
            <summary>
            解析URL中的[名称-值列表】
            </summary>
            <param name="url"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetUrlParamValue(System.String,System.String)">
            <summary>
            获取URL中指定参数名对应的参数值。如果不存在，那么返回string.Empty
            </summary>
            <param name="url"></param>
            <param name="paramKey"></param>
            <returns>返回参数值。如果不存在，那么返回string.Empty</returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetCustomDescription(System.Type)">
            <summary>
            获取指定属性的CustomDescriptionAttribute描述
            </summary>
            <param name="objType"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetCustomDescription``1">
            <summary>
            获取指定属性的CustomDescriptionAttribute描述
            </summary> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.TableConvertToList``1(System.Data.DataTable)">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="tb"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.HasAttributes(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="attributeType"></param>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.HasAttributes(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <param name="authorizeType"></param>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            
            </summary> 
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.GetAttribute``1(System.Type)">
            <summary>
            
            </summary> 
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.ParseConnectionString(System.String)">
            <summary>
            
            </summary>
            <param name="connectionStr"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.ToSqlConnectionString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.FormatSqlServerConnectionString(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ipAddressOrHostName"></param>
            <param name="port"></param>
            <param name="database"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.FormatMysqlEfConnectionString(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ipAddressOrHostName"></param>
            <param name="port"></param>
            <param name="database"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.Utils.FormatMysqlConnectionString(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ipAddressOrHostName"></param>
            <param name="port"></param>
            <param name="database"></param>
            <param name="uid"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Utitlies.Utils.IsFullTrust">
            <summary>
            获取应用程序是否以完全信任级别运行
            </summary>
        </member>
        <member name="T:TCSoft.Draw.IVerifyImage">
            <summary>
            验证码图片接口
            </summary>
        </member>
        <member name="M:TCSoft.Draw.IVerifyImage.GenerateImage(System.String,System.Int32,System.Int32,System.Drawing.Color,System.Int32)">
            <summary>
            生成验证码图片
            </summary>
            <param name="code">要显示的验证码</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="bgcolor">背景色</param>
            <param name="textcolor">文字颜色</param>
        </member>
        <member name="T:TCSoft.Draw.VerifyImage">
            <summary>
            验证码图片类
            </summary>
        </member>
        <member name="M:TCSoft.Draw.VerifyImage.Next(System.Int32)">
            <summary>
            获得下一个随机数
            </summary>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Draw.VerifyImage.Next(System.Int32,System.Int32)">
            <summary>
            获得下一个随机数
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.Draw.DefaultVerifyImage">
            <summary>
            验证码图片类
            </summary>
        </member>
        <member name="T:TCSoft.Draw.VerifyImageInfo">
            <summary>
            验证码图片信息
            </summary>
        </member>
        <member name="P:TCSoft.Draw.VerifyImageInfo.Image">
            <summary>
            生成出的图片
            </summary>
        </member>
        <member name="P:TCSoft.Draw.VerifyImageInfo.ContentType">
            <summary>
            输出的图片类型，如 image/pjpeg
            </summary>
        </member>
        <member name="P:TCSoft.Draw.VerifyImageInfo.ImageFormat">
            <summary>
            图片的格式
            </summary>
        </member>
        <member name="T:TCSoft.Utitlies.CarryMode">
            <summary>
            进位方式
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.CarryMode.Round">
            <summary>
            是四舍五入的
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.CarryMode.Upper">
            <summary>
            进一法
            </summary>
        </member>
        <member name="F:TCSoft.Utitlies.CarryMode.Lower">
            <summary>
            去尾法
            </summary>
        </member>
        <member name="T:TCSoft.Utitlies.ZipHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.ZipHelper.UnZipFile(System.String,System.String)">
            <summary>
            压缩
            </summary>
            <param name="zipedFileName"></param>
            <param name="targetDirectory"></param>
        </member>
        <member name="M:TCSoft.Utitlies.ZipHelper.UnZipFile(System.String,System.String,System.String,System.String)">
            <summary>
            解压缩文件
            </summary>
            <param name="zipedFileName">Zip的完整文件名（如D:\test.zip）</param>
            <param name="targetDirectory">解压到的目录</param>
            <param name="password">解压密码</param>
            <param name="fileFilter">文件过滤正则表达式</param>
        </member>
        <member name="T:TCSoft.Validation.ValidationResult">
            <summary>
            Describes the result of a validation of a potential change through a business service.
            </summary>
        </member>
        <member name="M:TCSoft.Validation.ValidationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TCSoft.Validation.ValidationResult"/> class.
            </summary>
        </member>
        <member name="M:TCSoft.Validation.ValidationResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TCSoft.Validation.ValidationResult"/> class.
            </summary> 
            <param name="message">The message.</param>
        </member>
        <member name="M:TCSoft.Validation.ValidationResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TCSoft.Validation.ValidationResult"/> class.
            </summary>
            <param name="memeberName">Name of the memeber.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:TCSoft.Validation.ValidationResult.MemberName">
            <summary>
            Gets or sets the name of the member.
            </summary>
            <value>
            The name of the member.  May be null for general validation issues.
            </value>
        </member>
        <member name="P:TCSoft.Validation.ValidationResult.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="T:TCSoft.Wcf.DefaultServiceHostFactory">
            <summary>
            默认服务宿主工厂
            </summary>
        </member>
        <member name="M:TCSoft.Wcf.DefaultServiceHostFactory.#ctor(TCSoft.Security.IAuthenticationService,System.Uri,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="authorizationService">授权服务</param>
            <param name="baseUriAddress"></param>
            <param name="containMeta">是否包含元数据</param>
            <param name="includeExceptionDetailInFaults"> 获取或设置一个值，该值指定在返回客户端以供调试的 SOAP 错误详细信息中是否包含托管异常信息</param>
            <param name="authorizationEnabled">是否启动授权</param>
        </member>
        <member name="M:TCSoft.Wcf.DefaultServiceHostFactory.CreateHosts(System.Collections.Generic.IDictionary{System.String,TCSoft.Wcf.ServiceInfo})">
            <summary>
            创建WCF服务宿主列表
            </summary>
            <param name="serviceInfoDictionary">服务列表</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Wcf.DefaultServiceHostFactory.AddAuthorizateBehaviors(System.ServiceModel.Description.ServiceDescription)">
            <summary>
            授权方法添加
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:TCSoft.Wcf.DefaultServiceHostFactory.AddDefaultBehaviors(System.ServiceModel.Description.ServiceDescription)">
            <summary>
            
            </summary>
            <param name="description"></param>
        </member>
        <member name="T:TCSoft.Wcf.ServiceInfo">
            <summary>
            服务基本信息
            </summary>
        </member>
        <member name="P:TCSoft.Wcf.ServiceInfo.ServiceType">
            <summary>
            WCF服务的具体实现类
            </summary>
        </member>
        <member name="P:TCSoft.Wcf.ServiceInfo.ContractType">
            <summary>
            实现WCF契约的服务类型（可以是接口或类）
            </summary>
        </member>
        <member name="T:TCSoft.Wcf.ClientServiceBindingHelper">
            <summary>
            客户端绑定辅助类
            </summary>
        </member>
        <member name="M:TCSoft.Wcf.ClientServiceBindingHelper.GetClientBinding(System.Boolean)">
            <summary>
            GetClient 绑定信息
            </summary>   
        </member>
        <member name="M:TCSoft.Wcf.ClientServiceBindingHelper.SetCredentials``1(System.ServiceModel.ClientBase{``0},System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="client"></param>
            <param name="username"></param>
            <param name="rawPassword"></param>
            <param name="authorizationEnabled">安全设置是否启动</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TCSoft.Wcf.SelfHostWcfService">
            <summary>
            包含一个Wcf服务的宿主服务
            </summary>
        </member>
        <member name="M:TCSoft.Wcf.SelfHostWcfService.#ctor(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="implementedContract">服务实现的契约类型</param>
        </member>
        <member name="M:TCSoft.Wcf.SelfHostWcfService.#ctor(System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="singletonInstance"></param>
            <param name="implementedContract">服务实现的契约类型</param>
        </member>
        <member name="M:TCSoft.Wcf.SelfHostWcfService.OnStarting">
            <summary>
            服务正在启动
            </summary>
        </member>
        <member name="M:TCSoft.Wcf.SelfHostWcfService.OnClosing">
            <summary>
            服务正在停止
            </summary>
        </member>
        <member name="T:TCSoft.Services.ServiceEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:TCSoft.Security.Hash">
            <summary>
            Compute an (almost) unique hash value from various sources.
            This allows computing hash keys that are easily storable
            and comparable from heterogenous components.
            </summary>
        </member>
        <member name="M:TCSoft.Security.Hash.ToString">
            <summary>
            重载函数，返回当前Hash对象的Hash值
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Security.Hash.AddString(System.String)">
            <summary>
            添加Hash值构造字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:TCSoft.Security.Hash.AddStringInvariant(System.String)">
            <summary>
            添加使用固定区域性的大小写规则的字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:TCSoft.Security.Hash.AddTypeReference(System.Type)">
            <summary>
            添加引用类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:TCSoft.Security.Hash.AddDateTime(System.DateTime)">
            <summary>
            添加时间
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="M:TCSoft.Security.Hash.GetStringHashCode(System.String)">
            <summary>
            We need a custom string hash code function, because .NET string.GetHashCode()
            function is not guaranteed to be constant across multiple executions.
            </summary>
        </member>
        <member name="P:TCSoft.Security.Hash.Value">
            <summary>
            hash值
            </summary>
        </member>
        <member name="T:TCSoft.Draw.LineEquation">
            <summary>
            Ax + By = C 关联的直线(其中B取1)
            </summary>
        </member>
        <member name="M:TCSoft.Draw.LineEquation.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:TCSoft.Draw.LineEquation.IntersectsWithLine(TCSoft.Draw.LineEquation,System.Drawing.Point@)">
            <summary>
            两直线是否相交
            </summary>
            <param name="otherLine"></param>
            <param name="intersectionPoint"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Draw.LineEquation.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:TCSoft.Draw.LineEquation.IsVertical">
            <summary>
            是否为垂直线条
            </summary>
        </member>
        <member name="P:TCSoft.Draw.LineEquation.Start">
            <summary>
            开始节点
            </summary>
        </member>
        <member name="P:TCSoft.Draw.LineEquation.End">
            <summary>
            结束节点
            </summary>
        </member>
        <member name="P:TCSoft.Draw.LineEquation.A">
            <summary>
            直线表达式Ax + By = C 中的A
            </summary>
        </member>
        <member name="P:TCSoft.Draw.LineEquation.B">
            <summary>
            直线表达式Ax + By = C 中的B
            </summary>
        </member>
        <member name="P:TCSoft.Draw.LineEquation.C">
            <summary>
            直线表达式Ax + By = C 中的C
            </summary>
        </member>
        <member name="T:TCSoft.Utitlies.Singleton`1">
            <summary>
            A statically compiled "singleton" used to store objects throughout the 
            lifetime of the app domain. Not so much singleton in the pattern's 
            sense of the word as a standardized way to store single instances.
            </summary>
            <typeparam name="T">The type of object to store.</typeparam>
            <remarks>Access to the instance is not synchrnoized.</remarks>
        </member>
        <member name="T:TCSoft.Utitlies.Singleton">
            <summary>
            Provides access to all "singletons" stored by <see cref="T:TCSoft.Utitlies.Singleton`1"/>.
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.Singleton.AllSingletons">
            <summary>
            所有单例对象列表
            </summary>
        </member>
        <member name="P:TCSoft.Utitlies.Singleton`1.Instance">
            <summary>The singleton instance for the specified type T. Only one instance (at the time) of this object for each type of T.</summary>
        </member>
        <member name="T:TCSoft.Utitlies.DefaultSingleton`1">
            <summary>
            默认单例实现
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TCSoft.Utitlies.DefaultSingleton`1.GetInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.DefaultSingleton`1.GetInstance(System.Func{`0})">
            <summary>
            获取单例实例。
            <para>　　如果实例已经存在，那么从单例列表中获取；如果单例实例列表中不存在，那么根据func函数构造一个新的单例，并加入列表且返回。</para>
            </summary>
            <returns>如果实例已经存在，那么从单例列表中获取；如果单例实例列表中不存在，那么根据func函数构造一个新的单例，并加入列表且返回。</returns>
        </member>
        <member name="T:TCSoft.Utitlies.SingletonList`1">
            <summary>
            Provides a singleton list for a certain type.
            </summary>
            <typeparam name="T">The type of list to store.</typeparam>
        </member>
        <member name="P:TCSoft.Utitlies.SingletonList`1.Instance">
            <summary>
            The singleton instance for the specified type T. Only one instance (at the time) of this list for each type of T.
            </summary>
        </member>
        <member name="T:TCSoft.Utitlies.SingletonDictionary`2">
            <summary>
            Provides a singleton dictionary for a certain key and vlaue type.
            </summary>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TValue">The type of value.</typeparam>
        </member>
        <member name="P:TCSoft.Utitlies.SingletonDictionary`2.Instance">
            <summary>
            The singleton instance for the specified type T. Only one instance (at the time) of this dictionary for each type of T.
            </summary>
        </member>
        <member name="T:TCSoft.Collections.IPageOfItems`1">
            <summary>
            分页数据列表
            </summary>
            <typeparam name="T"></typeparam> 
        </member>
        <member name="P:TCSoft.Collections.IPageOfItems`1.SearchHitViewState">
            <summary>
            查询页面状态数据
            TODO 需要从但前页面移除
            </summary>
        </member>
        <member name="T:TCSoft.Collections.PageOfItems`1">
            <summary>
            分页数据列表
            </summary>
            <typeparam name="T"></typeparam> 
        </member>
        <member name="M:TCSoft.Collections.PageOfItems`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:TCSoft.Collections.PageOfItems`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Collections.PageOfItems`1.SearchHitViewState">
            <summary>
            查询页面状态数据 
            </summary>
        </member>
        <member name="P:TCSoft.Collections.PageOfItems`1.PageIndex">
            <summary> 
            索引从0开始
            </summary> 
        </member>
        <member name="P:TCSoft.Collections.PageOfItems`1.PageSize">
            <summary>
            页面大小
            </summary> 
        </member>
        <member name="P:TCSoft.Collections.PageOfItems`1.TotalItemCount">
            <summary>
            大于0的数字
            </summary> 
        </member>
        <member name="P:TCSoft.Collections.PageOfItems`1.TotalPageCount">
            <summary>
            最少有一页，哪怕是没有记录，也会显示一页
            </summary> 
        </member>
        <member name="P:TCSoft.Collections.PageOfItems`1.StartIndex">
            <summary>
            从0开始计数
            </summary> 
        </member>
        <member name="P:TCSoft.Collections.PageOfItems`1.EndIndex">
            <summary>
            取值范围从0到TotalItemCount-1
            </summary> 
        </member>
        <member name="T:TCSoft.Network.UdpSyncListenReceviceService">
            <summary>
            高性能Udp 异步接收数据服务
            </summary>
        </member>
        <member name="T:TCSoft.Services.ThreadServiceBase">
            <summary>
            线程监听服务基类
            </summary>
            <typeparam name="TEventArgs">扩展参数</typeparam>
        </member>
        <member name="M:TCSoft.Services.ThreadServiceBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Services.ThreadServiceBase.Excute(System.Object)">
            <summary>
            线程方法
            </summary>
        </member>
        <member name="M:TCSoft.Services.ThreadServiceBase.OnStarted">
            <summary>
            服务正在启动
            </summary>
        </member>
        <member name="M:TCSoft.Services.ThreadServiceBase.OnClosing">
            <summary>
            服务正在停止
            </summary>
        </member>
        <member name="P:TCSoft.Services.ThreadServiceBase.ThreadStartParams">
            <summary>
            线程启动参数
            </summary>
        </member>
        <member name="F:TCSoft.Network.UdpSyncListenReceviceService._maxConnections">
            <summary>
             the maximum number of connections the Service is designed to handle simultaneously 
            </summary>
        </member>
        <member name="F:TCSoft.Network.UdpSyncListenReceviceService._mBufferManager">
            <summary>
            表示一个大数据缓存
            </summary>
        </member>
        <member name="F:TCSoft.Network.UdpSyncListenReceviceService._mReadPool">
            <summary>
             pool of reusable SocketAsyncEventArgs objects for  read and accept socket operations
            </summary>
        </member>
        <member name="M:TCSoft.Network.UdpSyncListenReceviceService.#ctor(System.Int32,System.Int32)">
            <summary>
            Create an uninitialized server instance.  
            To start the server listening for connection requests
            call the Init method followed by Start method
            </summary>   
            <param name="maxConnections">the maximum number of connections the Service is designed to handle simultaneously</param>
            <param name="receiveBufferSize">buffer size to use for each socket I/O operation</param> 
        </member>
        <member name="M:TCSoft.Network.UdpSyncListenReceviceService.Init">
            <summary>
            Initializes the server by preallocating reusable buffers and 
            context objects.  These objects do not need to be preallocated 
            or reused, but it is done this way to illustrate how the API can 
            easily be used to create reusable objects to increase server performance. 
            </summary>
        </member>
        <member name="M:TCSoft.Network.UdpSyncListenReceviceService.OnSocketEventCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary> 
            This method is called whenever a receive or send operation is completed on a socket 
            </summary>
            <param name="sender"></param>
            <param name="e">SocketAsyncEventArg associated with the completed receive operation</param>
        </member>
        <member name="M:TCSoft.Network.UdpSyncListenReceviceService.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary> 
            This method is invoked when an asynchronous receive operation completes. 
            If the remote host closed the connection, then the socket is closed.  
            If data was received then the data is echoed back to the client.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:TCSoft.Network.UdpSyncListenReceviceService.ListenSocket">
            <summary>
            设置或获取通信Socket
            </summary>
        </member>
        <member name="E:TCSoft.Network.UdpSyncListenReceviceService.ReceviceCompleted">
            <summary>
             
            </summary>
        </member>
        <member name="P:TCSoft.Network.UdpSyncListenReceviceService.ConcurrentWaitRecClients">
            <summary>
            并发等待数量
            </summary>
        </member>
        <member name="T:TCSoft.Network.UdpListenServiceBase">
            <summary>
            高性能Udp监听服务
            </summary>
        </member>
        <member name="F:TCSoft.Network.UdpListenServiceBase.NumConnections">
            <summary>
            当前允许最大并发数量
            </summary>
        </member>
        <member name="F:TCSoft.Network.UdpListenServiceBase._listenPort">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.Network.UdpListenServiceBase.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:TCSoft.Network.UdpListenServiceBase.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create an uninitialized server instance.  
            To start the server listening for connection requests
            call the Init method followed by Start method
            </summary>   
            <param name="numConnections">the maximum number of connections the Service is designed to handle simultaneously</param>
            <param name="receiveBufferSize">buffer size to use for each socket I/O operation</param>
            <param name="port"> </param>
        </member>
        <member name="M:TCSoft.Network.UdpListenServiceBase.Send(System.Byte[],System.Net.EndPoint)">
            <summary>
            
            </summary>
            <param name="data"></param> 
            <param name="remoteEndPoint"> </param>
        </member>
        <member name="M:TCSoft.Network.UdpListenServiceBase.Excute(System.Object)">
            <summary>
            线程方法
            </summary>
        </member>
        <member name="E:TCSoft.Network.UdpListenServiceBase.ReceviceCompleted">
            <summary>
             
            </summary>
        </member>
        <member name="T:TCSoft.Network.BufferManager">
            <summary>
            缓存池管理，用户SocketAsyncEventArgs
            </summary>
        </member>
        <member name="F:TCSoft.Network.BufferManager._mNumBytes">
            <summary>
             the total number of bytes controlled by the buffer pool
            </summary>
        </member>
        <member name="F:TCSoft.Network.BufferManager._mBuffer">
            <summary>
            the underlying byte array maintained by the Buffer Manager
            </summary> 
        </member>
        <member name="M:TCSoft.Network.BufferManager.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="totalBytes">缓存总字节</param>
            <param name="bufferSize">单个缓存对象大小</param>
        </member>
        <member name="M:TCSoft.Network.BufferManager.InitBuffer">
            <summary>
            使用BufferManager分配缓存控件
            </summary>
        </member>
        <member name="M:TCSoft.Network.BufferManager.SetBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            从缓存池中分配缓存给SocketAsyncEventArgs对象
            </summary>
            <param name="args"></param>
            <returns>true if the buffer was successfully set, else false</returns>
        </member>
        <member name="M:TCSoft.Network.BufferManager.FreeBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            移除SocketAsyncEventArg关联的缓存，并将其压入缓冲池
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:TCSoft.Network.TcpListenServiceBase">
            <summary>
             高性能Tcp监听服务
            </summary>
        </member>
        <member name="F:TCSoft.Network.TcpListenServiceBase._mNumConnections">
            <summary>
             the maximum number of connections the Service is designed to handle simultaneously 
            </summary>
        </member>
        <member name="F:TCSoft.Network.TcpListenServiceBase._mReadPool">
            <summary>
             pool of reusable SocketAsyncEventArgs objects for write, read and accept socket operations
            </summary>
        </member>
        <member name="F:TCSoft.Network.TcpListenServiceBase._mNumConnectedSockets">
            <summary>
            the total number of clients connected to the server 
            </summary>
        </member>
        <member name="M:TCSoft.Network.TcpListenServiceBase.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:TCSoft.Network.TcpListenServiceBase.#ctor(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Create an uninitialized server instance.  
            To start the server listening for connection requests
            call the Init method followed by Start method
            </summary>   
            <param name="numConnections">the maximum number of connections the Service is designed to handle simultaneously</param>
            <param name="receiveBufferSize">buffer size to use for each socket I/O operation</param>
            <param name="listenIp"></param>
            <param name="port"> </param>
        </member>
        <member name="M:TCSoft.Network.TcpListenServiceBase.Init">
            <summary>
            Initializes the server by preallocating reusable buffers and 
            context objects.  These objects do not need to be preallocated 
            or reused, but it is done this way to illustrate how the API can 
            easily be used to create reusable objects to increase server performance. 
            </summary>
        </member>
        <member name="M:TCSoft.Network.TcpListenServiceBase.StartAccept(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
             Begins an operation to accept a connection request from the client   
            </summary>
            <param name="acceptEventArg"></param>
        </member>
        <member name="M:TCSoft.Network.TcpListenServiceBase.AcceptEventArgCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is the callback method associated with Socket.AcceptAsync 
            operations and is invoked when an accept operation is complete
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TCSoft.Network.TcpListenServiceBase.OnSocketEventCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary> 
            This method is called whenever a receive or send operation is completed on a socket 
            </summary>
            <param name="sender"></param>
            <param name="e">SocketAsyncEventArg associated with the completed receive operation</param>
        </member>
        <member name="M:TCSoft.Network.TcpListenServiceBase.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary> 
            This method is invoked when an asynchronous receive operation completes. 
            If the remote host closed the connection, then the socket is closed.  
            If data was received then the data is echoed back to the client.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TCSoft.Network.TcpListenServiceBase.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            This method is invoked when an asynchronous send operation completes.  
            The method issues another receive on the socket to read any additional 
            data sent from the client 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TCSoft.Network.TcpListenServiceBase.CloseClientSocket(System.String)">
            <summary>
            根据键值关闭套件信息
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:TCSoft.Network.TcpListenServiceBase.CloseClientSocket(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            关闭套件信息
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TCSoft.Network.TcpListenServiceBase.SendAsync(System.Byte[],System.String)">
            <summary>
            
            </summary>
            <param name="data"></param> 
            <param name="repoteEndPointStr"></param>
        </member>
        <member name="M:TCSoft.Network.TcpListenServiceBase.RemoveKey(System.String)">
            <summary>
            异常键值
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:TCSoft.Network.TcpListenServiceBase.ReadSocketEventArgsTable">
            <summary>
            读取套接事件参数表
            </summary>
        </member>
        <member name="P:TCSoft.Network.TcpListenServiceBase.ListenPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Network.TcpListenServiceBase.ListenIp">
            <summary>
            监听IP
            </summary>
        </member>
        <member name="E:TCSoft.Network.TcpListenServiceBase.SendCompleted">
            <summary>
             
            </summary>
        </member>
        <member name="E:TCSoft.Network.TcpListenServiceBase.ReceviceCompleted">
            <summary>
             
            </summary>
        </member>
        <member name="T:TCSoft.Network.SocketAsyncEventArgsPool">
            <summary>
            Based on example from http://msdn2.microsoft.com/en-us/library/system.net.sockets.socketasynceventargs.socketasynceventargs.aspx
            Represents a collection of reusable SocketAsyncEventArgs objects.  
            </summary>
        </member>
        <member name="F:TCSoft.Network.SocketAsyncEventArgsPool.pool">
            <summary>
            Pool of SocketAsyncEventArgs.
            </summary>
        </member>
        <member name="M:TCSoft.Network.SocketAsyncEventArgsPool.#ctor(System.Int32)">
            <summary>
            Initializes the object pool to the specified size.
            </summary>
            <param name="capacity">Maximum number of SocketAsyncEventArgs objects the pool can hold.</param>
        </member>
        <member name="M:TCSoft.Network.SocketAsyncEventArgsPool.Pop">
            <summary>
            Removes a SocketAsyncEventArgs instance from the pool.
            </summary>
            <returns>SocketAsyncEventArgs removed from the pool.</returns>
        </member>
        <member name="M:TCSoft.Network.SocketAsyncEventArgsPool.Push(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Add a SocketAsyncEventArg instance to the pool. 
            </summary>
            <param name="item">SocketAsyncEventArgs instance to add to the pool.</param>
        </member>
        <member name="T:TCSoft.Network.TcpClientService">
            <summary>
            Tcp客户端封装
            </summary>
        </member>
        <member name="M:TCSoft.Network.TcpClientService.#ctor(System.String,System.Int32,System.Net.IPEndPoint,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="serverIp">服务IP</param>
            <param name="port">端口</param>
            <param name="localEP">本地IP</param>
            <param name="sendTimeout">发送超时时间</param>
            <param name="revTimeout">接收超时时间</param> 
        </member>
        <member name="M:TCSoft.Network.TcpClientService.#ctor(System.String,System.Int32,System.Net.IPEndPoint,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="serverIp">服务IP</param>
            <param name="port">端口</param>
            <param name="localEP">本地IP</param>
            <param name="sendTimeout">发送超时时间</param>
            <param name="revTimeout">接收超时时间</param>
            <param name="maxRecBufSize">最大接收缓存大小</param>
        </member>
        <member name="M:TCSoft.Network.TcpClientService.BeginSend(System.Byte[])">
            <summary>
            TCP客户端开始发送数据
            </summary>
            <param name="data">待发送的数据</param>
        </member>
        <member name="P:TCSoft.Network.TcpClientService.Logger">
            <summary>
            日志
            </summary>
        </member>
        <member name="E:TCSoft.Network.TcpClientService.ReadCompleted">
            <summary>
            TCP客户端读取完成事件
            </summary>
        </member>
        <member name="T:TCSoft.Network.UdpSyncListenServiceBase">
            <summary>
            高性能Udp 异步发送数据服务
            </summary>
        </member>
        <member name="F:TCSoft.Network.UdpSyncListenServiceBase.MaxConcurrentConnections">
            <summary>
            当前允许最大并发数量
            </summary>
        </member>
        <member name="M:TCSoft.Network.UdpSyncListenServiceBase.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:TCSoft.Network.UdpSyncListenServiceBase.#ctor(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Create an uninitialized server instance.  
            To start the server listening for connection requests
            call the Init method followed by Start method
            </summary>   
            <param name="numConnections">the maximum number of connections the Service is designed to handle simultaneously</param>
            <param name="receiveBufferSize">buffer size to use for each socket I/O operation</param>
            <param name="listenIp"></param>
            <param name="port"> </param>
        </member>
        <member name="M:TCSoft.Network.UdpSyncListenServiceBase.Send(System.Byte[],System.Net.EndPoint)">
            <summary>
            
            </summary>
            <param name="data"></param> 
            <param name="remoteEndPoint"> </param>
        </member>
        <member name="P:TCSoft.Network.UdpSyncListenServiceBase.ListenPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Network.UdpSyncListenServiceBase.ListenIp">
            <summary>
            监听IP
            </summary>
        </member>
        <member name="E:TCSoft.Network.UdpSyncListenServiceBase.ReceviceCompleted">
            <summary>
             
            </summary>
        </member>
        <member name="P:TCSoft.Network.UdpSyncListenServiceBase.ConcurrentWaitRecClients">
            <summary>
            并发等待数量
            </summary>
        </member>
        <member name="T:TCSoft.Network.PacketBufferToken">
            <summary>
            发送或接收的数据包
            </summary>
        </member>
        <member name="F:TCSoft.Network.PacketBufferToken.BufferSize">
            <summary>
            缓存区域大小
            </summary> 
        </member>
        <member name="F:TCSoft.Network.PacketBufferToken.RemoteEndPoint">
            <summary>
            远程IP
            </summary>
        </member>
        <member name="M:TCSoft.Network.PacketBufferToken.#ctor(System.Net.Sockets.Socket,System.Boolean)">
            <summary>
            
            </summary>
            <param name="hanlder"></param>
            <param name="isUdp"></param>
        </member>
        <member name="M:TCSoft.Network.PacketBufferToken.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:TCSoft.Network.PacketBufferToken.Data">
            <summary>
            缓存区值
            </summary>
        </member>
        <member name="P:TCSoft.Network.PacketBufferToken.DataLength">
            <summary>
            缓存数据长度,套接接收的长度，而Data.Length表示缓存区最大长度
            </summary>
        </member>
        <member name="P:TCSoft.Network.PacketBufferToken.Hanlder">
            <summary>
            UDP 监听Socket或TCP连接,只有在使用TCP时用到了?
            </summary>
        </member>
        <member name="P:TCSoft.Network.PacketBufferToken.ProtocolType">
            <summary>
            套接协议类型
            </summary>
        </member>
        <member name="T:TCSoft.Services.ServiceStatus">
            <summary>
            服务状态
            </summary>
        </member>
        <member name="F:TCSoft.Services.ServiceStatus.UnStarted">
            <summary>
            未启动(其值等效为已经停止Stoped)
            </summary>
        </member>
        <member name="F:TCSoft.Services.ServiceStatus.Starting">
            <summary>
            正在启动
            </summary>
        </member>
        <member name="F:TCSoft.Services.ServiceStatus.Running">
            <summary>
            运行中
            </summary>
        </member>
        <member name="F:TCSoft.Services.ServiceStatus.Stoping">
            <summary>
            正在停止中=3
            </summary>
        </member>
        <member name="F:TCSoft.Services.ServiceStatus.Stoped">
            <summary>
            已经停止(其值等效为未启动UnStarted)=0
            </summary>
        </member>
        <member name="T:TCSoft.Services.StringEventArgs">
            <summary>
            包含字符串内容的事件参数
            </summary>
        </member>
        <member name="M:TCSoft.Services.StringEventArgs.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="P:TCSoft.Services.StringEventArgs.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="T:TCSoft.Services.TimeServiceBase">
            <summary>
            定时服务基类
            </summary> 
        </member>
        <member name="M:TCSoft.Services.TimeServiceBase.#ctor(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:TCSoft.Services.TimeServiceBase.Excute(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TCSoft.Services.TimeServiceBase.ResetInterval(System.TimeSpan)">
            <summary>
            重置引发 System.Timers.Timer.Elapsed 事件的间隔时间（以毫秒为单位）。默认为 100 毫秒
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:TCSoft.Services.TimeServiceBase.OnStarting">
            <summary>
            服务正在启动
            </summary>
        </member>
        <member name="M:TCSoft.Services.TimeServiceBase.OnClosing">
            <summary>
            服务正在停止
            </summary>
        </member>
        <member name="M:TCSoft.Services.TimeServiceBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:TCSoft.Logging.NullLogger">
            <summary>
            空日志
            </summary>
        </member>
        <member name="M:TCSoft.Logging.NullLogger.Log(TCSoft.Logging.LogLevel,System.String,System.Exception)">
            <summary>
            空日志
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:TCSoft.Collections.CollectionExtensions">
            <summary>
            集合类型扩展方法实现
            </summary>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.GetGuid(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            根据键值获取字典中Guid类型值。如果不存在或无效返回Guid.Empty
            </summary> 
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.GetInt(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            根据键值获取字典中int类型值。如果不存在或无效返回0
            </summary> 
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.GetBool(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            根据键值获取字典中bool类型值。如果不存在或无效返回false
            </summary> 
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.GetValue(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            根据键值获取字典中string类型值。如果不存在或无效返回string.Empty
            </summary> 
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            枚举列表只读访问转换
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns>返回一个只读访问列表</returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.GetValue``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            获取值
            </summary>
            <param name="arguments"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.GetGuidValue``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            获取值
            </summary>
            <param name="arguments"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.GetIntValue``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            获取值
            </summary>
            <param name="arguments"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.GetByIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            获取列表中的index个实例数据
            </summary>
            <param name="entities"></param>
            <param name="index">列表数据索引,索引从0开始</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.GetByKey``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            获取指定类型的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.GetByKey``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <summary>
            获取指定类型的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.TryAddOrUpdate(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            添加
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns>如果已经存在键值那么更新，否则添加</returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.TryAddOrUpdate(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.Object)">
            <summary>
            
            </summary> 
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.GetGuidByKey(System.Collections.Generic.IDictionary{System.Int32,System.Guid},System.Int32)">
            <summary>
            获取指定类型的值
            </summary> 
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.GetGuidByKey(System.Collections.Generic.IDictionary{System.Guid,System.Guid},System.Guid)">
            <summary>
            获取指定类型的值
            </summary> 
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.GetGuidByKey(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <summary>
            获取指定类型的值
            </summary> 
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.GetStrBykey(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <summary>
            
            </summary> 
            <param name="dictionary"></param>
            <param name="key"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Collections.CollectionExtensions.ToJsonBase64Str(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            先将字典转换为 KeyValuePair &lt;string, string  &gt; 列表，然后将该列表转换为JSON字符串。最后将JSON字符串转换为Base64字符串
            </summary> 
            <param name="dictionary"></param> 
            <returns>Base64字符串</returns>
        </member>
        <member name="T:TCSoft.Utitlies.TypeParse">
            <summary>
            类型转化工具
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsDefaultValue(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsNumeric(System.Object)">
            <summary>
            判断对象是否为Int32类型的数字
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsNumeric(System.String)">
            <summary>
            判断对象是否为Int32类型的数字
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsDouble(System.Object)">
            <summary>
            是否为Double类型
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToBool(System.Object)">
            <summary>
            string型转换为bool型
            </summary>
            <param name="expression">要转换的字符串</param> 
            <returns>转换后的bool类型结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToBool(System.Object,System.Boolean)">
            <summary>
            string型转换为bool型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的bool类型结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.BoolToInt(System.Object)">
            <summary>
            布尔类型转换为整型
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToBool(System.String,System.Boolean)">
            <summary>
            string型转换为bool型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的bool类型结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToInt(System.Object)">
            <summary>
            将对象转换为Int32类型
            </summary>
            <param name="expression">要转换的字符串</param> 
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToGuid(System.Object)">
            <summary>
            将对象转换为Guid类型
            </summary>
            <param name="expression">要转换的字符串</param> 
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToInt(System.Object,System.Int32)">
            <summary>
            将对象转换为Int32类型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToInt(System.String)">
            <summary>
            将字符串转换为Int32类型
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToUInt(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            转换为Int32范围的整数
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.UIntToInt(System.UInt32)">
            <summary>
            将无符号整数转换为有符号整数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IntToUInt(System.Int32)">
            <summary>
            将有符号整数转换为无符号整数，负数部分表示 Math.Abs((long)value) + int.MaxValue
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToUInt(System.String)">
            <summary>
            转换为UInt32范围的整数
            </summary>
            <param name="value"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToInt(System.String,System.Int32)">
            <summary>
            将对象转换为Int32类型
            </summary>
            <param name="str">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToInt64(System.Object)">
            <summary>
            将对象转换为Int64类型
            </summary>
            <param name="expression">要转换的字符串</param> 
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToInt64(System.Object,System.Int64)">
            <summary>
            将对象转换为Int64类型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToInt64(System.String,System.Int64)">
            <summary>
            将对象转换为Int64类型
            </summary>
            <param name="str">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToFloat(System.Object)">
            <summary>
            string型转换为float型
            </summary>
            <param name="strValue">要转换的字符串</param> 
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToFloat(System.Object,System.Single)">
            <summary>
            string型转换为float型
            </summary>
            <param name="strValue">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToFloat(System.String,System.Single)">
            <summary>
            string型转换为float型
            </summary>
            <param name="strValue">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToDouble(System.String,System.Double)">
            <summary>
            string型转换为double型
            </summary>
            <param name="strValue">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToDouble(System.Object,System.Double)">
            <summary>
             string型转换为double型
            </summary>
            <param name="strValue"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToDecimal(System.Object)">
            <summary>
            string型转为decimal
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToDecimal(System.Object,System.Decimal)">
            <summary>
            string型转为decimal
            </summary>
            <param name="strValue"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToDateTime(System.Object,System.DateTime)">
            <summary>
            String型转换为DateTime型
            </summary>
            <param name="strValue">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToDateTime(System.Object)">
            <summary>
            String型转换为DateTime型
            </summary>
            <param name="strValue">要转换的字符串</param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StrToDateTime(System.String,System.DateTime)">
            <summary>
            String型转换为DateTime型
            </summary>
            <param name="strValue">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.ConvertToDateTime(System.Object,System.DateTime)">
            <summary>
            将一个字符串转为为时间
            </summary>
            <param name="strValue">待转换的值</param>
            <param name="defValue">转换失败返回的时间</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.ConvertToDateTime(System.Object)">
            <summary>
            将一个字符串转为为时间
            </summary>
            <param name="strValue">待转换的值</param> 
            <returns>如果转换失败返回0001/1/1</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.ConvertToNullableDateTime(System.Object)">
            <summary>
            转换为时间对象，如果无效格式，那么返回空
            </summary>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.DateToShortStr(System.String)">
            <summary>
            时间转换为yyyy-MM-dd
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.DayOfWeekCh(System.DayOfWeek,System.Boolean)">
            <summary>
            输出中文星期
            </summary>
            <param name="dayOfWeekEn"></param>
            <param name="bHavingCss"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.DayOfWeekCh(System.DayOfWeek)">
            <summary>
            输出中文星期
            </summary>
            <param name="dayOfWeekEn"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.TimeToStr(System.Object)">
            <summary>
            时间字符串（长整数）转换为时间格式（X天X小时X分X秒格式）
            </summary>
            <param name="timeLong"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.TimeToStr(System.Object,System.Int32)">
            <summary>
            转秒时间为：天时分秒的格式
            </summary>
            <param name="timeLong"></param> 
            <param name="iUnit"> 默认0 ：XX天XX小时XX分XX秒 ；1：XX小时XX分XX秒 </param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsNumericArray(System.String[])">
            <summary>
            判断给定的字符串数组(strNumber)中的数据是不是都为数值型
            </summary>
            <param name="strNumber">要确认的字符串数组</param>
            <returns>是则返加true 不是则返回 false</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsNumericList(System.String)">
            <summary>
            是否为数值串列表，各数值间用","间隔
            </summary>
            <param name="numList"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.Round(System.Double,System.Int32)">
            <summary>
            四舍五入
            </summary>
            <param name="value">值</param>
            <param name="decimals">精度 最多8位小数</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.Round2(System.Double)">
            <summary>
            四舍五入 小数点后取2位
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.Round2(System.String)">
            <summary>
            四舍五入 小数点后取2位
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.Round2(System.Object)">
            <summary>
            四舍五入 小数点后取2位
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.RoundString2(System.String)">
            <summary>
            四舍五入 小数点后取2位
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.RoundString2(System.Double)">
            <summary>
            四舍五入 小数点后取2位
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.RoundString2(System.Object)">
            <summary>
            四舍五入 小数点后取2位
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.FormatMoney(System.Object)">
            <summary>
            格式化一个金额类型字符串(2位小数，千位使用逗号分割例如:123,230,000.00)
            </summary>
            <param name="money"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.FormatMoney(System.Double)">
            <summary>
            格式化一个金额类型字符串(2位小数，千位使用逗号分割例如:123,230,000.00)
            </summary>
            <param name="money"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.Round6(System.Double)">
            <summary>
            四舍五入 小数点后取4位
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.Round6(System.String)">
            <summary>
            四舍五入 小数点后取4位
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsNull(System.String)">
            <summary>
            是否为空
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsNumber(System.String)">
            <summary>
            是否为数值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsZNumber(System.String)">
            <summary>
            大于0的数值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsZNumber0(System.String)">
            <summary>
            大等于0的数值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsInt(System.String)">
            <summary>
            是否为整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsZInt(System.String)">
            <summary>
            大于0的整数值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsZInt0(System.String)">
            <summary>
            大等于0的整数值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsDate(System.Object)">
            <summary>
            是否为日期
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.ShortDate(System.String)">
            <summary>
            短日期 2000-01-01
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.ShortDate(System.Object)">
            <summary>
            短日期 2000-01-01
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.ShortDate(System.DateTime)">
            <summary>
            短日期 2000-01-01
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.LongDate(System.DateTime)">
            <summary>
            长日期 2000-01-01 24:59:59
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.LongDate(System.String)">
            <summary>
            长日期 2000-01-01 24:59:59
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.LongDate(System.Object)">
            <summary>
            长日期 2000-01-01 24:59:59
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.DateFormatYearMonth(System.DateTime)">
            <summary>
            只取年和月 2000-01
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.DateFormatYearMonth(System.String)">
            <summary>
            只取年和月 2000-01
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.DateFormatYearMonth(System.Object)">
            <summary>
            输入时间格式内容 返回 yyyy-MM 格式字符串
            </summary>
            <param name="date">时间格式内容</param>
            <returns> yyyy-MM 格式字符串</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.DescripText(System.String)">
            <summary>
            备注文字显示
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.IsValidYearMonth(System.String)">
            <summary>
            是否为有效的年月（yyyy-MM）格式日期
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StartDateForQuery(System.DateTime)">
            <summary>
            查询的开始时间
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.EndDateForQuery(System.DateTime)">
            <summary>
            查询的结束时间
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.StartDateForQuery(System.String)">
            <summary>
            查询的开始时间
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.EndDateForQuery(System.String)">
            <summary>
            查询的结束时间
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.ThisMonthFirstDate">
            <summary>
            本月第一天
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.ThisYearFirstDate">
            <summary>
            本年第一天
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.ThisFinanceFirstDate">
            <summary>
            当前时间段所在会计区间起始日期
            </summary>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.FinanceFirstDate(System.DateTime)">
            <summary>
            指定日期所在会计区间起始日期
            </summary>
            <param name="dat"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.GetDiffMoneths(System.DateTime,System.DateTime)">
            <summary>
            获取两个时间月份差绝对值+1
            </summary>
            <param name="fromDate">其实时间</param>
            <param name="endDate">结束时间</param>
            <returns>获取两个时间月份差绝对值+1</returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.GetBeginningWeek(System.DateTime)">
            <summary>
            一周星开始时间
            </summary>
            <param name="date"></param> 
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.GetBeginningWeek(System.DateTime,System.Int32)">
            <summary>
            一周星开始时间
            </summary>
            <param name="date"></param>
            <param name="firstDay">星期几作为一周的开始时间</param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.Utitlies.TypeParse.ConvertTo``1(System.Object)">
            <summary>
            将对象转换为指定类型对象
            </summary>
            <param name="obj"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:TCSoft.WebApi.ApiHttpClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:TCSoft.WebApi.ApiHttpClient.GetHttpClient">
            <summary>
            获取WebApi操作对象(API调用2分钟有效时间，过期无反映表示超时)
            </summary> 
            <returns>WebApi操作对象</returns>
        </member>
        <member name="M:TCSoft.WebApi.ApiHttpClient.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="requestUri"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.WebApi.ApiHttpClient.GetResponse``1(System.String)">
            <summary>
            获取数据(响应ResponseContent)
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="requestUri"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.WebApi.ApiHttpClient.GetResponse(System.String)">
            <summary>
            获取数据
            </summary> 
            <param name="requestUri"></param>
            <returns></returns>
        </member>
        <member name="M:TCSoft.WebApi.ApiHttpClient.GetByApiResult``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="requestUri"></param>
            <returns></returns>
        </member>
        <member name="T:TCSoft.WebApi.ApiResult">
            <summary>
            
            </summary> 
        </member>
        <member name="P:TCSoft.WebApi.ApiResult.Status">
            <summary>
            是否使用成功 0 成功
            </summary>
        </member>
        <member name="P:TCSoft.WebApi.ApiResult.Message">
            <summary>
            api操作消息
            </summary>
        </member>
        <member name="P:TCSoft.WebApi.ApiResult.ApiStatus">
            <summary>
            状态原始值（整数）
            </summary>
        </member>
        <member name="T:TCSoft.WebApi.ApiResult`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:TCSoft.WebApi.ApiResult`1.Data">
            <summary>
            当前获取的数据集合
            </summary>
        </member>
        <member name="T:TCSoft.WebApi.PagedApiResult`1">
            <summary>
            分页数据结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:TCSoft.WebApi.PagedApiResult`1.PageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:TCSoft.WebApi.PagedApiResult`1.PageSize">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="P:TCSoft.WebApi.PagedApiResult`1.TotalItemCount">
            <summary>
            总记录数量
            </summary>
        </member>
        <member name="T:TCSoft.WebApi.ServerApiStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:TCSoft.WebApi.ServerApiStatus.Success">
            <summary>
            操作成功
            </summary>
        </member>
        <member name="F:TCSoft.WebApi.ServerApiStatus.InvalidAccessToken">
            <summary>
            访问token无效
            </summary> 
        </member>
        <member name="F:TCSoft.WebApi.ServerApiStatus.InvalidApiAndSecret">
            <summary>
            Api无效
            </summary> 
        </member>
        <member name="F:TCSoft.WebApi.ServerApiStatus.InvalidClientId">
            <summary>
            客户ID无效
            </summary> 
        </member>
        <member name="F:TCSoft.WebApi.ServerApiStatus.None">
            <summary>
            无状态
            </summary>
        </member>
        <member name="F:TCSoft.WebApi.ServerApiStatus.Error">
            <summary>
            无状态
            </summary>
        </member>
        <member name="T:TCSoft.WebHelper">
            <summary>
            Represents a common helper
            </summary>
        </member>
        <member name="M:TCSoft.WebHelper.#ctor">
            <summary>
            Ctor
            </summary>
            <param name="httpContext">HTTP context</param>
        </member>
        <member name="M:TCSoft.WebHelper.GetUrlReferrer">
            <summary>
            Get URL referrer
            </summary>
            <returns>URL referrer</returns>
        </member>
        <member name="M:TCSoft.WebHelper.GetCurrentIpAddress">
            <summary>
            Get context IP address
            </summary>
            <returns>URL referrer</returns>
        </member>
        <member name="M:TCSoft.WebHelper.GetThisPageUrl(System.Boolean)">
            <summary>
            Gets this page name
            </summary>
            <param name="includeQueryString">Value indicating whether to include query strings</param>
            <returns>Page name</returns>
        </member>
        <member name="M:TCSoft.WebHelper.GetThisPageUrl(System.Boolean,System.Boolean)">
            <summary>
            Gets this page name
            </summary>
            <param name="includeQueryString">Value indicating whether to include query strings</param>
            <param name="useSsl">Value indicating whether to get SSL protected page</param>
            <returns>Page name</returns>
        </member>
        <member name="M:TCSoft.WebHelper.IsCurrentConnectionSecured">
            <summary>
            Gets a value indicating whether current connection is secured
            </summary>
            <returns>true - secured, false - not secured</returns>
        </member>
        <member name="M:TCSoft.WebHelper.ServerVariables(System.String)">
            <summary>
            Gets server variable by name
            </summary>
            <param name="name">Name</param>
            <returns>Server variable</returns>
        </member>
        <member name="M:TCSoft.WebHelper.GetStoreHost(System.Boolean)">
            <summary>
            Gets store host location
            </summary>
            <param name="useSsl">Use SSL</param>
            <returns>Store host location</returns>
        </member>
        <member name="M:TCSoft.WebHelper.GetStoreLocation">
            <summary>
            Gets store location
            </summary>
            <returns>Store location</returns>
        </member>
        <member name="M:TCSoft.WebHelper.GetStoreLocation(System.Boolean)">
            <summary>
            Gets store location
            </summary>
            <param name="useSsl">Use SSL</param>
            <returns>Store location</returns>
        </member>
        <member name="M:TCSoft.WebHelper.IsStaticResource(System.Web.HttpRequest)">
            <summary>
            Returns true if the requested resource is one of the typical resources that needn't be processed by the cms engine.
            </summary>
            <param name="request">HTTP Request</param>
            <returns>True if the request targets a static resource file.</returns>
            <remarks>
            These are the file extensions considered to be static resources:
            .css
            .gif
            .png 
            .jpg
            .jpeg
            .js
            .axd
            .ashx
            </remarks>
        </member>
        <member name="M:TCSoft.WebHelper.MapPath(System.String)">
            <summary>
            Maps a virtual path to a physical disk path.
            </summary>
            <param name="path">The path to map. E.g. "~/bin"</param>
            <returns>The physical path. E.g. "c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="M:TCSoft.WebHelper.ModifyQueryString(System.String,System.String,System.String)">
            <summary>
            Modifies query string
            </summary>
            <param name="url">Url to modify</param>
            <param name="queryStringModification">Query string modification</param>
            <param name="anchor">Anchor</param>
            <returns>New url</returns>
        </member>
        <member name="M:TCSoft.WebHelper.RemoveQueryString(System.String,System.String)">
            <summary>
            Remove query string from url
            </summary>
            <param name="url">Url to modify</param>
            <param name="queryString">Query string to remove</param>
            <returns>New url</returns>
        </member>
        <member name="M:TCSoft.WebHelper.RestartAppDomain(System.Boolean,System.String)">
            <summary>
            Restart application domain
            </summary>
            <param name="makeRedirect">A value indicating whether </param>
            <param name="redirectUrl">Redirect URL; empty string if you want to redirect to the current page URL</param>
        </member>
        <member name="M:TCSoft.WebHelper.GetParamValueByName(System.String)">
            <summary>
            获取URL参数或Form表单、ServerVariables、Cookies的值
            </summary>
            <param name="name">参数名</param>
            <returns>string</returns>
        </member>
        <member name="P:TCSoft.WebHelper.IsRequestBeingRedirected">
            <summary>
            Gets a value that indicates whether the client is being redirected to a new location
            </summary>
        </member>
    </members>
</doc>
